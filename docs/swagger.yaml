basePath: /api/v1
definitions:
  discordgo.User:
    properties:
      accent_color:
        description: User's banner color, encoded as an integer representation of
          hexadecimal color code
        type: integer
      avatar:
        description: |-
          The hash of the user's avatar. Use Session.UserAvatar
          to retrieve the avatar itself.
        type: string
      banner:
        description: The hash of the user's banner image.
        type: string
      bot:
        description: Whether the user is a bot.
        type: boolean
      discriminator:
        description: The discriminator of the user (4 numbers after name).
        type: string
      email:
        description: |-
          The email of the user. This is only present when
          the application possesses the email scope for the user.
        type: string
      flags:
        description: |-
          The flags on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      id:
        description: The ID of the user.
        type: string
      locale:
        description: The user's chosen language option.
        type: string
      mfa_enabled:
        description: Whether the user has multi-factor authentication enabled.
        type: boolean
      premium_type:
        description: |-
          The type of Nitro subscription on a user's account.
          Only available when the request is authorized via a Bearer token.
        type: integer
      public_flags:
        description: |-
          The public flags on a user's account.
          This is a combination of bit masks; the presence of a certain flag can
          be checked by performing a bitwise AND between this int and the flag.
        type: integer
      system:
        description: Whether the user is an Official Discord System user (part of
          the urgent message system).
        type: boolean
      token:
        description: |-
          The token of the user. This is only present for
          the user represented by the current session.
        type: string
      username:
        description: The user's username.
        type: string
      verified:
        description: Whether the user's email is verified.
        type: boolean
    type: object
  entities.LoginResponse:
    properties:
      access_token:
        type: string
      expires_at:
        type: integer
    type: object
  model.Activity:
    properties:
      guild_default:
        type: boolean
      id:
        type: integer
      name:
        type: string
      xp:
        type: integer
    type: object
  model.Chain:
    properties:
      coin_gecko_id:
        type: string
      currency:
        type: string
      id:
        type: integer
      name:
        type: string
      short_name:
        type: string
    type: object
  model.CoingeckoSupportedTokens:
    properties:
      id:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
  model.CommonwealthDiscussionSubscription:
    properties:
      created_at:
        type: string
      discord_thread_id:
        type: string
      discussion_id:
        type: integer
      id:
        type: integer
      updated_at:
        type: string
    type: object
  model.ConfigXpLevel:
    properties:
      level:
        type: integer
      min_xp:
        type: integer
    type: object
  model.DaoProposal:
    properties:
      closed_at:
        type: string
      created_at:
        type: string
      creator_id:
        type: string
      description:
        type: string
      discussion_channel_id:
        type: string
      guild_config_dao_proposal_id:
        type: integer
      guild_id:
        type: string
      id:
        type: integer
      title:
        type: string
      updated_at:
        type: string
      voting_channel_id:
        type: string
    type: object
  model.DaoProposalVoteCount:
    properties:
      choice:
        type: string
      guild_id:
        type: string
      proposal_id:
        type: string
      sum:
        type: integer
    type: object
  model.DaoProposalVoteOption:
    properties:
      address:
        type: string
      chain_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      proposal_id:
        type: integer
      required_amount:
        type: string
      symbol:
        type: string
      updated_at:
        type: string
      vote_option:
        $ref: '#/definitions/model.DaoVoteOption'
      vote_option_id:
        type: integer
    type: object
  model.DaoVote:
    properties:
      choice:
        type: string
      created_at:
        type: string
      id:
        type: integer
      point:
        type: number
      proposal_id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  model.DaoVoteOption:
    properties:
      created_at:
        type: string
      id:
        type: integer
      type:
        type: string
      updated_at:
        type: string
    type: object
  model.DiscordGuild:
    properties:
      active:
        type: boolean
      alias:
        type: string
      bot_scopes:
        items:
          type: string
        type: array
      created_at:
        type: string
      global_xp:
        type: boolean
      id:
        type: string
      log_channel:
        type: string
      name:
        type: string
      roles:
        items:
          $ref: '#/definitions/model.GuildRole'
        type: array
    type: object
  model.DiscordGuildStat:
    properties:
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: string
      nr_of_animated_emojis:
        type: integer
      nr_of_announcement_channels:
        type: integer
      nr_of_bots:
        type: integer
      nr_of_categories:
        type: integer
      nr_of_channels:
        type: integer
      nr_of_custom_stickers:
        type: integer
      nr_of_emojis:
        type: integer
      nr_of_members:
        type: integer
      nr_of_roles:
        type: integer
      nr_of_server_stickers:
        type: integer
      nr_of_stage_channels:
        type: integer
      nr_of_static_emojis:
        type: integer
      nr_of_stickers:
        type: integer
      nr_of_text_channels:
        type: integer
      nr_of_users:
        type: integer
      nr_of_voice_channels:
        type: integer
    type: object
  model.DiscordUserDevice:
    properties:
      created_at:
        type: string
      id:
        type: string
      ios_noti_token:
        type: string
      updated_at:
        type: string
    type: object
  model.DiscordUserGMStreak:
    properties:
      created_at:
        type: string
      discord_id:
        type: string
      guild_id:
        type: string
      last_streak_date:
        type: string
      streak_count:
        type: integer
      total_count:
        type: integer
      updated_at:
        type: string
    type: object
  model.DiscordUserTokenAlert:
    properties:
      created_at:
        type: string
      device:
        $ref: '#/definitions/model.DiscordUserDevice'
      device_id:
        type: string
      discord_id:
        type: string
      id:
        type: string
      is_enable:
        type: boolean
      price_set:
        type: number
      symbol:
        type: string
      token_id:
        type: string
      trend:
        type: string
      updated_at:
        type: string
    type: object
  model.DiscordUserUpvoteStreak:
    properties:
      created_at:
        type: string
      discord_id:
        type: string
      last_streak_date:
        type: string
      streak_count:
        type: integer
      total_count:
        type: integer
      updated_at:
        type: string
    type: object
  model.Envelop:
    properties:
      command:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  model.ExtraFee:
    properties:
      chargeFeeBy:
        type: string
      feeAmount:
        type: string
      feeReceiver:
        type: string
      isImBps:
        type: boolean
    type: object
  model.GuildConfigActivity:
    properties:
      active:
        type: boolean
      activity:
        $ref: '#/definitions/model.Activity'
      activity_id:
        type: integer
      guild_id:
        type: string
    type: object
  model.GuildConfigDaoProposal:
    properties:
      address:
        type: string
      authority:
        type: string
      chain_id:
        type: integer
      created_at:
        type: string
      guideline_channel_id:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      proposal_channel_id:
        type: string
      required_amount:
        type: string
      symbol:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  model.GuildConfigDaoTracker:
    properties:
      channel_id:
        type: string
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: string
      source:
        type: string
      space:
        type: string
      updated_at:
        type: string
    type: object
  model.GuildConfigDefaultCollection:
    properties:
      address:
        type: string
      chain_id:
        type: string
      created_at:
        type: string
      guild_id:
        type: string
      symbol:
        type: string
      updated_at:
        type: string
    type: object
  model.GuildConfigDefaultTicker:
    properties:
      default_ticker:
        type: string
      guild_id:
        type: string
      query:
        type: string
    type: object
  model.GuildConfigGmGn:
    properties:
      channel_id:
        type: string
      emoji:
        type: string
      guild_id:
        type: string
      id:
        type: string
      msg:
        type: string
      sticker:
        type: string
    type: object
  model.GuildConfigInviteTracker:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      id:
        type: string
      webhook_url:
        $ref: '#/definitions/model.JSONNullString'
    type: object
  model.GuildConfigLevelRole:
    properties:
      guild_id:
        type: string
      level:
        type: integer
      level_config:
        $ref: '#/definitions/model.ConfigXpLevel'
      role_id:
        type: string
    type: object
  model.GuildConfigLevelupMessage:
    properties:
      channel_id:
        type: string
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: string
      image_url:
        type: string
      message:
        type: string
      updated_at:
        type: string
    type: object
  model.GuildConfigMixRole:
    properties:
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      nft_requirement:
        $ref: '#/definitions/model.MixRoleNFTRequirement'
      nft_requirement_id:
        type: integer
      required_level:
        type: integer
      role_id:
        type: string
      token_requirement:
        $ref: '#/definitions/model.MixRoleTokenRequirement'
      token_requirement_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.GuildConfigRepostReaction:
    properties:
      emoji:
        type: string
      emoji_start:
        type: string
      emoji_stop:
        type: string
      guild_id:
        type: string
      id:
        type: string
      quantity:
        type: integer
      reaction_type:
        type: string
      repost_channel_id:
        type: string
    type: object
  model.GuildConfigSalesTracker:
    properties:
      chain:
        type: string
      channel_id:
        type: string
      contract_address:
        type: string
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: string
      updated_at:
        type: string
    type: object
  model.GuildConfigTokenRole:
    properties:
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      required_amount:
        type: number
      role_id:
        type: string
      token:
        $ref: '#/definitions/model.Token'
      token_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.GuildConfigTwitterBlacklist:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      guild_id:
        type: string
      twitter_id:
        type: string
      twitter_username:
        type: string
    type: object
  model.GuildConfigTwitterFeed:
    properties:
      guild_id:
        type: string
      twitter_access_token:
        type: string
      twitter_access_token_secret:
        type: string
      twitter_consumer_key:
        type: string
      twitter_consumer_secret:
        type: string
    type: object
  model.GuildConfigVoteChannel:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      id:
        type: string
    type: object
  model.GuildConfigWalletVerificationMessage:
    properties:
      content:
        type: string
      created_at:
        type: string
      discord_message_id:
        type: string
      embedded_message:
        items:
          type: integer
        type: array
      guild_id:
        type: string
      verify_channel_id:
        type: string
      verify_role_id:
        type: string
    type: object
  model.GuildConfigWelcomeChannel:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      id:
        type: string
      welcome_message:
        type: string
    type: object
  model.GuildConfigXPRole:
    properties:
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      required_xp:
        type: integer
      role_id:
        type: string
      updated_at:
        type: string
    type: object
  model.GuildRole:
    properties:
      guild_id:
        type: string
      name:
        type: string
      role_id:
        type: integer
    type: object
  model.GuildUser:
    properties:
      avatar:
        type: string
      guild_id:
        type: string
      id:
        type: string
      invited_by:
        type: string
      joined_at:
        type: string
      nickname:
        type: string
      roles:
        items:
          type: string
        type: array
      user_id:
        type: string
    type: object
  model.GuildUserXP:
    properties:
      guild:
        $ref: '#/definitions/model.DiscordGuild'
      guild_id:
        type: string
      guild_rank:
        type: integer
      level:
        type: integer
      nr_of_actions:
        type: integer
      progress:
        type: number
      total_xp:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.JSONNullString:
    properties:
      string:
        type: string
      valid:
        description: Valid is true if String is not NULL
        type: boolean
    type: object
  model.KyberswapSupportedToken:
    properties:
      address:
        type: string
      chain_id:
        type: integer
      chain_name:
        type: string
      created_at:
        type: string
      decimals:
        type: integer
      id:
        type: integer
      logo_uri:
        type: string
      name:
        type: string
      symbol:
        type: string
      updated_at:
        type: string
    type: object
  model.MixRoleNFTRequirement:
    properties:
      created_at:
        type: string
      id:
        type: integer
      nft_collection:
        $ref: '#/definitions/model.NFTCollection'
      nft_collection_id:
        type: string
      required_amount:
        type: integer
      updated_at:
        type: string
    type: object
  model.MixRoleTokenRequirement:
    properties:
      created_at:
        type: string
      id:
        type: integer
      required_amount:
        type: number
      token:
        $ref: '#/definitions/model.Token'
      token_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.MonikerConfig:
    properties:
      amount:
        type: number
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: string
      moniker:
        type: string
      plural:
        type: string
      token:
        $ref: '#/definitions/model.OffchainTipBotToken'
      token_id:
        type: string
      updated_at:
        type: string
    type: object
  model.NFTCollection:
    properties:
      address:
        type: string
      author:
        type: string
      chain_id:
        type: string
      created_at:
        type: string
      erc_format:
        type: string
      id:
        type: string
      image:
        type: string
      is_verified:
        type: boolean
      name:
        type: string
      symbol:
        type: string
    type: object
  model.NFTCollectionDetail:
    properties:
      address:
        type: string
      author:
        type: string
      chain:
        $ref: '#/definitions/model.Chain'
      chain_id:
        type: string
      created_at:
        type: string
      erc_format:
        type: string
      id:
        type: string
      image:
        type: string
      is_verified:
        type: boolean
      name:
        type: string
      symbol:
        type: string
    type: object
  model.NewListedNFTCollection:
    properties:
      address:
        type: string
      author:
        type: string
      chain:
        type: string
      chain_id:
        type: string
      created_at:
        type: string
      erc_format:
        type: string
      id:
        type: string
      image:
        type: string
      is_verified:
        type: boolean
      name:
        type: string
      symbol:
        type: string
    type: object
  model.NftSoulbound:
    properties:
      collection_address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      total_soulbound:
        type: integer
      trait_type:
        type: string
      updated_at:
        type: string
      value:
        type: string
    type: object
  model.OffchainTipBotToken:
    properties:
      coin_gecko_id:
        type: string
      created_at:
        type: string
      icon:
        type: string
      id:
        type: string
      service_fee:
        type: number
      status:
        type: integer
      token_id:
        type: string
      token_name:
        type: string
      token_symbol:
        type: string
      updated_at:
        type: string
    type: object
  model.OffchainTipBotTransferHistory:
    properties:
      action:
        type: string
      amount:
        type: number
      created_at:
        type: string
      fee_amount:
        type: number
      guild_id:
        type: string
      id:
        type: string
      log_id:
        type: string
      receiver_id:
        type: string
      sender_id:
        type: string
      service_fee:
        type: number
      status:
        type: string
      token:
        type: string
      tx_hash:
        type: string
      updated_at:
        type: string
    type: object
  model.OnchainTipBotTransaction:
    properties:
      all:
        type: boolean
      amount:
        type: number
      channel_id:
        type: string
      claimed_at:
        type: string
      created_at:
        type: string
      duration:
        type: integer
      each:
        type: boolean
      full_command:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      image:
        type: string
      message:
        type: string
      recipient_address:
        type: string
      recipients:
        type: string
      sender:
        type: string
      string:
        description: (pending, claimed)
        type: string
      token_symbol:
        type: string
      transfer_type:
        type: string
      tx_hash:
        type: string
      updated_at:
        type: string
    type: object
  model.Quest:
    properties:
      action:
        type: string
      frequency:
        type: integer
      id:
        type: string
      rewards:
        items:
          $ref: '#/definitions/model.QuestReward'
        type: array
      routine:
        type: string
      title:
        type: string
    type: object
  model.QuestReward:
    properties:
      id:
        type: string
      pass_id:
        type: string
      quest:
        $ref: '#/definitions/model.Quest'
      quest_id:
        type: string
      reward_amount:
        type: integer
      reward_type:
        $ref: '#/definitions/model.QuestRewardType'
      reward_type_id:
        type: string
    type: object
  model.QuestRewardType:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  model.QuestUserList:
    properties:
      action:
        type: string
      current:
        type: integer
      end_time:
        type: string
      id:
        type: string
      is_claimed:
        type: boolean
      is_completed:
        type: boolean
      multiplier:
        type: number
      quest:
        $ref: '#/definitions/model.Quest'
      quest_id:
        type: string
      routine:
        type: string
      start_time:
        type: string
      target:
        type: integer
      user_id:
        type: string
    type: object
  model.QuestUserReward:
    properties:
      claimed_at:
        type: string
      pass_id:
        type: string
      quest_id:
        type: string
      reward:
        $ref: '#/definitions/model.QuestReward'
      reward_amount:
        type: integer
      reward_id:
        type: string
      reward_type_id:
        type: string
      start_time:
        type: string
      user_id:
        type: string
    type: object
  model.RouteElement:
    properties:
      amountOut:
        type: string
      exchange:
        type: string
      extra: {}
      limitReturnAmount:
        type: string
      pool:
        type: string
      poolExtra: {}
      poolLength:
        type: integer
      poolType:
        type: string
      swapAmount:
        type: string
      tokenIn:
        type: string
      tokenOut:
        type: string
    type: object
  model.RouteSummary:
    properties:
      amountIn:
        type: string
      amountInUsd:
        type: string
      amountOut:
        type: string
      amountOutUsd:
        type: string
      extraFee:
        $ref: '#/definitions/model.ExtraFee'
      gas:
        type: string
      gasPrice:
        type: string
      gasUsd:
        type: string
      route:
        items:
          items:
            $ref: '#/definitions/model.RouteElement'
          type: array
        type: array
      tokenIn:
        type: string
      tokenInMarketPriceAvailable:
        type: boolean
      tokenOut:
        type: string
      tokenOutMarketPriceAvailable:
        type: boolean
    type: object
  model.SaleBotMarketplace:
    properties:
      id:
        type: integer
      name:
        type: string
      url:
        type: string
    type: object
  model.SaleBotTwitterConfig:
    properties:
      address:
        type: string
      chain_id:
        type: integer
      collection_name:
        type: string
      created_at:
        type: string
      id:
        type: integer
      marketplace:
        $ref: '#/definitions/model.SaleBotMarketplace'
      marketplace_id:
        type: integer
      slug:
        type: string
      updated_at:
        type: string
    type: object
  model.Token:
    properties:
      address:
        type: string
      chain:
        $ref: '#/definitions/model.Chain'
      chain_id:
        type: integer
      coin_gecko_id:
        type: string
      decimal:
        type: integer
      discord_bot_supported:
        type: boolean
      guild_default:
        type: boolean
      id:
        type: integer
      is_native:
        type: boolean
      name:
        type: string
      symbol:
        type: string
    type: object
  model.TradeItem:
    properties:
      id:
        type: string
      is_from:
        type: boolean
      token_address:
        type: string
      token_ids:
        items:
          type: string
        type: array
      trade_offer_id:
        type: string
    type: object
  model.TradeOffer:
    properties:
      created_at:
        type: string
      have_items:
        items:
          $ref: '#/definitions/model.TradeItem'
        type: array
      id:
        type: string
      owner_address:
        type: string
      updated_at:
        type: string
      want_items:
        items:
          $ref: '#/definitions/model.TradeItem'
        type: array
    type: object
  model.TwitterPostStreak:
    properties:
      created_at:
        type: string
      guild_id:
        type: string
      last_streak_date:
        type: string
      streak_count:
        type: integer
      total_count:
        type: integer
      twitter_handle:
        type: string
      twitter_id:
        type: string
      updated_at:
        type: string
    type: object
  model.UpvoteStreakTier:
    properties:
      id:
        type: integer
      streak_required:
        type: integer
      vote_interval:
        type: integer
      xp_per_interval:
        type: integer
    type: object
  model.User:
    properties:
      discriminator:
        type: string
      guild_users:
        items:
          $ref: '#/definitions/model.GuildUser'
        type: array
      id:
        type: string
      nr_of_join:
        type: integer
      username:
        type: string
    type: object
  model.UserEnvelopStreak:
    properties:
      total_envelop:
        type: integer
      user_id:
        type: string
    type: object
  model.UserFactionXpsMapping:
    properties:
      academy_xp:
        type: integer
      imperial_xp:
        type: integer
      merchant_xp:
        type: integer
      rebellio_xp:
        type: integer
    type: object
  model.UserFeedback:
    properties:
      command:
        type: string
      completed_at:
        type: string
      confirmed_at:
        type: string
      created_at:
        type: string
      discord_id:
        type: string
      feedback:
        type: string
      id:
        $ref: '#/definitions/uuid.NullUUID'
      message_id:
        type: string
      status:
        type: string
    type: object
  model.UserTelegramDiscordAssociation:
    properties:
      discord_id:
        type: string
      telegram_username:
        type: string
    type: object
  model.UserTokenSupportRequest:
    properties:
      channel_id:
        type: string
      coin_gecko_id:
        type: string
      created_at:
        type: string
      decimal:
        type: integer
      guild_id:
        type: string
      icon:
        type: string
      id:
        type: integer
      message_id:
        type: string
      status:
        type: string
      symbol:
        type: string
      token_address:
        type: string
      token_chain_id:
        type: integer
      token_name:
        type: string
      updated_at:
        type: string
      user_discord_id:
        type: string
    type: object
  model.UserWallet:
    properties:
      address:
        type: string
      chain_type:
        $ref: '#/definitions/model.JSONNullString'
      created_at:
        type: string
      guild_id:
        type: string
      user:
        $ref: '#/definitions/model.User'
        description: preload user
      user_discord_id:
        type: string
    type: object
  model.UserWalletWatchlistItem:
    properties:
      address:
        type: string
      alias:
        type: string
      created_at:
        type: string
      fetched_data:
        type: boolean
      is_owner:
        type: boolean
      net_worth:
        type: number
      type:
        type: string
      user_id:
        type: string
    type: object
  request.AddNftWatchlistRequest:
    properties:
      chain:
        type: string
      collection_address:
        type: string
      collection_symbol:
        type: string
      guild_id:
        type: string
      user_id:
        type: string
    type: object
  request.AddToTwitterBlackListRequest:
    properties:
      created_by:
        type: string
      guild_id:
        type: string
      twitter_id:
        type: string
      twitter_username:
        type: string
    type: object
  request.AddToWatchlistRequest:
    properties:
      coin_gecko_id:
        type: string
      is_fiat:
        type: boolean
      symbol:
        type: string
      user_id:
        type: string
    type: object
  request.AddTokenPriceAlertRequest:
    properties:
      alert_type:
        enum:
        - price_reaches
        - price_rises_above
        - price_drops_to
        - change_is_over
        - change_is_under
        type: string
      frequency:
        enum:
        - only_once
        - once_a_day
        - always
        type: string
      price_by_percent:
        type: number
      symbol:
        type: string
      user_discord_id:
        type: string
      value:
        type: number
    type: object
  request.AssignVerifiedRoleRequest:
    properties:
      guild_id:
        type: string
      user_discord_id:
        type: string
    required:
    - guild_id
    - user_discord_id
    type: object
  request.BalcklistChannelRepostConfigRequest:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
    type: object
  request.ClaimOnchainTransferRequest:
    properties:
      address:
        type: string
      claim_id:
        type: integer
      user_id:
        type: string
    type: object
  request.ClaimQuestsRewardsRequest:
    properties:
      quest_id:
        type: string
      routine:
        type: string
      user_id:
        type: string
    type: object
  request.ConfigDefaultCollection:
    properties:
      address:
        type: string
      chain:
        type: string
      guild_id:
        type: string
      symbol:
        type: string
    type: object
  request.ConfigDefaultTokenRequest:
    properties:
      guild_id:
        type: string
      symbol:
        type: string
    type: object
  request.ConfigGroupNFTRoleRequest:
    properties:
      collection_address:
        items:
          type: string
        type: array
      group_name:
        type: string
      guild_id:
        type: string
      number_of_tokens:
        type: integer
      role_id:
        type: string
    type: object
  request.ConfigLevelRoleRequest:
    properties:
      guild_id:
        type: string
      level:
        type: integer
      role_id:
        type: string
    type: object
  request.ConfigRepostReactionStartStop:
    properties:
      emoji_start:
        type: string
      emoji_stop:
        type: string
      guild_id:
        type: string
      repost_channel_id:
        type: string
    type: object
  request.ConfigRepostRequest:
    properties:
      emoji:
        type: string
      guild_id:
        type: string
      quantity:
        type: integer
      repost_channel_id:
        type: string
    type: object
  request.ConfigureInviteRequest:
    properties:
      guild_id:
        type: string
      log_channel:
        type: string
      webhook_url:
        type: string
    type: object
  request.CreateCommonwealthDiscussionSubscription:
    properties:
      discord_thread_id:
        type: string
      discussion_id:
        type: integer
    required:
    - discord_thread_id
    - discussion_id
    type: object
  request.CreateDaoProposalRequest:
    properties:
      creator_id:
        type: string
      description:
        type: string
      guild_id:
        type: string
      title:
        type: string
      vote_option:
        $ref: '#/definitions/request.VoteOptionRequest'
      voting_channel_id:
        type: string
    type: object
  request.CreateDaoVoteRequest:
    properties:
      choice:
        type: string
      proposal_id:
        type: integer
      user_id:
        type: string
    required:
    - choice
    - proposal_id
    - user_id
    type: object
  request.CreateDefaultRoleRequest:
    properties:
      guild_id:
        type: string
      role_id:
        type: string
    required:
    - guild_id
    - role_id
    type: object
  request.CreateEnvelop:
    properties:
      command:
        type: string
      user_id:
        type: string
    required:
    - command
    - user_id
    type: object
  request.CreateGuildMixRole:
    properties:
      guild_id:
        type: string
      nft_requirement:
        $ref: '#/definitions/request.MixRoleNFTRequirement'
      required_level:
        type: integer
      role_id:
        type: string
      token_requirement:
        $ref: '#/definitions/request.MixRoleTokenRequirement'
    required:
    - guild_id
    - role_id
    type: object
  request.CreateGuildRequest:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  request.CreateGuildTokenRole:
    properties:
      address:
        type: string
      amount:
        type: number
      chain:
        type: string
      guild_id:
        type: string
      role_id:
        type: string
    required:
    - address
    - amount
    - chain
    - guild_id
    - role_id
    type: object
  request.CreateGuildXPRole:
    properties:
      guild_id:
        type: string
      role_id:
        type: string
      xp:
        type: integer
    required:
    - guild_id
    - role_id
    type: object
  request.CreateNFTCollectionRequest:
    properties:
      address:
        type: string
      author:
        type: string
      chain:
        type: string
      chain_id:
        type: string
      channel_id:
        type: string
      guild_id:
        type: string
      message_id:
        type: string
      priority_flag:
        type: boolean
    type: object
  request.CreateProposalChannelConfig:
    properties:
      address:
        type: string
      authority:
        enum:
        - admin
        - token_holder
        type: string
      chain:
        type: string
      channel_id:
        type: string
      guild_id:
        type: string
      required_amount:
        type: number
      type:
        enum:
        - nft_collection
        - crypto_token
        type: string
    required:
    - authority
    - channel_id
    - guild_id
    type: object
  request.CreateSalesTrackerConfigRequest:
    properties:
      chain:
        type: string
      channel_id:
        type: string
      contract_address:
        type: string
      guild_id:
        type: string
    type: object
  request.CreateTipConfigNotify:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      token:
        type: string
    type: object
  request.CreateTradeOfferRequest:
    properties:
      have_items:
        items:
          $ref: '#/definitions/request.TradeOfferItem'
        type: array
      owner_address:
        type: string
      want_items:
        items:
          $ref: '#/definitions/request.TradeOfferItem'
        type: array
    required:
    - owner_address
    type: object
  request.CreateTwitterSaleConfigRequest:
    properties:
      address:
        type: string
      chain_id:
        type: integer
      marketplace:
        type: string
    type: object
  request.CreateUserRequest:
    properties:
      guild_id:
        type: string
      id:
        type: string
      invited_by:
        type: string
      nickname:
        type: string
      username:
        type: string
    type: object
  request.CreateUserTokenSupportRequest:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      message_id:
        type: string
      token_address:
        type: string
      token_chain:
        type: string
      user_discord_id:
        type: string
    required:
    - channel_id
    - guild_id
    - message_id
    - token_address
    - token_chain
    - user_discord_id
    type: object
  request.DeleteDiscordUserAlertRequest:
    properties:
      id:
        type: string
    type: object
  request.DeleteGuildConfigDaoProposal:
    properties:
      id:
        type: string
    type: object
  request.DeleteGuildConfigDaoTracker:
    properties:
      id:
        type: string
    type: object
  request.DeleteJoinLeaveChannelConfigRequest:
    properties:
      guild_id:
        type: string
    type: object
  request.DeleteMonikerConfigRequest:
    properties:
      guild_id:
        type: string
      moniker:
        type: string
    required:
    - guild_id
    - moniker
    type: object
  request.DeleteUserDeviceRequest:
    properties:
      device_id:
        type: string
    type: object
  request.DeleteVoteChannelConfigRequest:
    properties:
      guild_id:
        type: string
    type: object
  request.DeleteWelcomeConfigRequest:
    properties:
      guild_id:
        type: string
    type: object
  request.EditMessageRepostRequest:
    properties:
      guild_id:
        type: string
      origin_channel_id:
        type: string
      origin_message_id:
        type: string
      repost_channel_id:
        type: string
      repost_message_id:
        type: string
    type: object
  request.GenerateVerificationRequest:
    properties:
      guild_id:
        type: string
      is_reverify:
        type: boolean
      user_discord_id:
        type: string
    type: object
  request.GetTrackingWalletsRequest:
    properties:
      userID:
        type: string
    required:
    - userID
    type: object
  request.GuildConfigDefaultNftTickerRequest:
    properties:
      chain_id:
        type: integer
      collection_address:
        type: string
      guild_id:
        type: string
      query:
        type: string
      symbol:
        type: string
    type: object
  request.GuildConfigDefaultTickerRequest:
    properties:
      default_ticker:
        type: string
      guild_id:
        type: string
      query:
        type: string
    type: object
  request.GuildIDRequest:
    properties:
      guild_id:
        type: string
    type: object
  request.LinkUserTelegramWithDiscordRequest:
    properties:
      discord_id:
        type: string
      telegram_username:
        type: string
    required:
    - discord_id
    - telegram_username
    type: object
  request.LoginRequest:
    properties:
      access_token:
        type: string
    type: object
  request.MixRoleNFTRequirement:
    properties:
      amount:
        type: integer
      nft_id:
        type: string
    required:
    - amount
    - nft_id
    type: object
  request.MixRoleTokenRequirement:
    properties:
      amount:
        type: number
      token_id:
        type: integer
    required:
    - amount
    - token_id
    type: object
  request.NewGuildConfigWalletVerificationMessageRequest:
    properties:
      content:
        type: string
      created_at:
        type: string
      discord_message_id:
        type: string
      embedded_message:
        items:
          type: integer
        type: array
      guild_id:
        type: string
      verify_channel_id:
        type: string
      verify_role_id:
        type: string
    type: object
  request.OffchainTransferRequest:
    properties:
      all:
        type: boolean
      amount:
        type: number
      chain_id:
        type: string
      channel_id:
        type: string
      each:
        type: boolean
      guild_id:
        type: string
      image:
        type: string
      message:
        type: string
      platform:
        type: string
      recipients:
        items:
          type: string
        type: array
      sender:
        type: string
      token:
        type: string
      transfer_type:
        type: string
    type: object
  request.RoleReactionRequest:
    properties:
      guild_id:
        type: string
      message_id:
        type: string
      reaction:
        type: string
    type: object
  request.RoleReactionUpdateRequest:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      message_id:
        type: string
      reaction:
        type: string
      role_id:
        type: string
    type: object
  request.SendUserXPRequest:
    properties:
      amount:
        type: integer
      each:
        type: boolean
      guild_id:
        type: string
      recipients:
        items:
          type: string
        type: array
    type: object
  request.SetUpvoteMessageCacheRequest:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      message_id:
        type: string
      user_id:
        type: string
    type: object
  request.SubmitOnchainTransferRequest:
    properties:
      all:
        type: boolean
      amount:
        type: number
      channel_id:
        type: string
      duration:
        type: integer
      each:
        type: boolean
      full_command:
        type: string
      guild_id:
        type: string
      image:
        type: string
      message:
        type: string
      platform:
        type: string
      recipients:
        items:
          type: string
        type: array
      sender:
        type: string
      token:
        type: string
      transfer_type:
        type: string
    type: object
  request.SwapRequest:
    properties:
      chainName:
        type: string
      routeSummary:
        $ref: '#/definitions/model.RouteSummary'
      userDiscordId:
        type: string
    required:
    - chainName
    - userDiscordId
    type: object
  request.TrackWalletRequest:
    properties:
      address:
        type: string
      alias:
        type: string
      channel_id:
        type: string
      is_owner:
        type: boolean
      message_id:
        type: string
      type:
        type: string
      user_id:
        type: string
    required:
    - address
    - type
    - user_id
    type: object
  request.TradeOfferItem:
    properties:
      token_address:
        type: string
      token_ids:
        items:
          type: string
        type: array
    required:
    - token_address
    - token_ids
    type: object
  request.TwitterHashtag:
    properties:
      channel_id:
        type: string
      from_twitter:
        items:
          type: string
        type: array
      guild_id:
        type: string
      hashtag:
        items:
          type: string
        type: array
      rule_id:
        type: string
      twitter_username:
        items:
          type: string
        type: array
      user_id:
        type: string
    type: object
  request.TwitterPost:
    properties:
      content:
        type: string
      guild_id:
        type: string
      tweet_id:
        type: string
      twitter_handle:
        type: string
      twitter_id:
        type: string
    type: object
  request.UpdateDaoVoteRequest:
    properties:
      choice:
        type: string
      user_id:
        type: string
    required:
    - choice
    - user_id
    type: object
  request.UpdateGuildRequest:
    properties:
      active:
        type: boolean
      global_xp:
        type: boolean
      left_at:
        type: string
      log_channel:
        type: string
    type: object
  request.UpdateQuestProgressRequest:
    properties:
      action:
        type: string
      guild_id:
        type: string
      user_id:
        type: string
    type: object
  request.UpdateUserFeedbackRequest:
    properties:
      id:
        type: string
      status:
        type: string
    type: object
  request.UpsertCustomTokenConfigRequest:
    properties:
      active:
        type: boolean
      address:
        type: string
      chain:
        type: string
      chain_id:
        type: integer
      coin_gecko_id:
        type: string
      decimals:
        type: integer
      discord_bot_supported:
        type: boolean
      guild_default:
        type: boolean
      guild_id:
        type: string
      id:
        type: integer
      name:
        type: string
      symbol:
        type: string
    type: object
  request.UpsertDiscordUserAlertRequest:
    properties:
      device_id:
        type: string
      discord_id:
        type: string
      id:
        type: string
      is_enable:
        type: boolean
      price_set:
        type: number
      symbol:
        type: string
      token_id:
        type: string
      trend:
        type: string
    type: object
  request.UpsertGmConfigRequest:
    properties:
      channel_id:
        type: string
      emoji:
        type: string
      guild_id:
        type: string
      msg:
        type: string
      sticker:
        type: string
    type: object
  request.UpsertGuildConfigDaoTracer:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      snapshot_url:
        type: string
    type: object
  request.UpsertGuildConfigTipRangeRequest:
    properties:
      guild_id:
        type: string
      max:
        type: number
      min:
        type: number
    type: object
  request.UpsertGuildDefaultCurrencyRequest:
    properties:
      Symbol:
        type: string
      guild_id:
        type: string
    type: object
  request.UpsertGuildPruneExcludeRequest:
    properties:
      guild_id:
        type: string
      role_id:
        type: string
    type: object
  request.UpsertGuildTokenConfigRequest:
    properties:
      active:
        type: boolean
      guild_id:
        type: string
      symbol:
        type: string
    type: object
  request.UpsertJoinLeaveChannelConfigRequest:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
    type: object
  request.UpsertMonikerConfigRequest:
    properties:
      amount:
        type: number
      guild_id:
        type: string
      moniker:
        type: string
      plural:
        type: string
      token:
        type: string
    required:
    - amount
    - guild_id
    - moniker
    - token
    type: object
  request.UpsertUserDeviceRequest:
    properties:
      device_id:
        type: string
      ios_noti_token:
        type: string
    type: object
  request.UpsertUserTag:
    properties:
      guild_id:
        type: string
      is_active:
        type: boolean
      user_id:
        type: string
    type: object
  request.UpsertVoteChannelConfigRequest:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
    type: object
  request.UpsertWelcomeConfigRequest:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      welcome_message:
        type: string
    type: object
  request.UserFeedbackRequest:
    properties:
      avatar:
        type: string
      command:
        type: string
      discord_id:
        type: string
      feedback:
        type: string
      message_id:
        type: string
      username:
        type: string
    type: object
  request.VerifyWalletAddressRequest:
    properties:
      code:
        type: string
      signature:
        type: string
      wallet_address:
        type: string
    type: object
  request.VoteOptionRequest:
    properties:
      address:
        type: string
      chain_id:
        type: integer
      id:
        type: integer
      required_amount:
        type: integer
      symbol:
        type: string
    type: object
  response.AddToWatchlistResponse:
    properties:
      data:
        $ref: '#/definitions/response.AddToWatchlistResponseData'
    type: object
  response.AddToWatchlistResponseData:
    properties:
      base_suggestions:
        items:
          $ref: '#/definitions/model.CoingeckoSupportedTokens'
        type: array
      target_suggestions:
        items:
          $ref: '#/definitions/model.CoingeckoSupportedTokens'
        type: array
    type: object
  response.AddTokenPriceAlertResponse:
    properties:
      data:
        $ref: '#/definitions/response.TokenPriceAlertResponseData'
    type: object
  response.ChainGasTrackerResponseData:
    properties:
      data:
        $ref: '#/definitions/response.GasTrackerResponse'
    type: object
  response.ClaimOnchainTransfer:
    properties:
      amount:
        type: number
      amount_in_usd:
        type: number
      recipient_address:
        type: string
      recipient_id:
        type: string
      sender_id:
        type: string
      symbol:
        type: string
      tx_hash:
        type: string
      tx_url:
        type: string
    type: object
  response.ClaimOnchainTransferResponse:
    properties:
      data:
        $ref: '#/definitions/response.ClaimOnchainTransfer'
    type: object
  response.ClaimQuestsRewardsResponse:
    properties:
      data:
        $ref: '#/definitions/response.ClaimQuestsRewardsResponseData'
    type: object
  response.ClaimQuestsRewardsResponseData:
    properties:
      rewards:
        items:
          $ref: '#/definitions/model.QuestUserReward'
        type: array
    type: object
  response.Coin:
    properties:
      coin_id:
        type: integer
      id:
        type: string
      large:
        type: string
      market_cap_rank:
        type: integer
      name:
        type: string
      price_btc:
        type: number
      score:
        type: integer
      slug:
        type: string
      small:
        type: string
      symbol:
        type: string
      thumb:
        type: string
    type: object
  response.CoinDescription:
    properties:
      en:
        type: string
    type: object
  response.CoinImage:
    properties:
      large:
        type: string
      small:
        type: string
      thumb:
        type: string
    type: object
  response.CoinMarketItemData:
    properties:
      current_price:
        type: number
      id:
        type: string
      image:
        type: string
      is_default:
        type: boolean
      is_pair:
        type: boolean
      market_cap:
        type: number
      market_cap_rank:
        type: integer
      name:
        type: string
      price_change_percentage_1h_in_currency:
        type: number
      price_change_percentage_7d_in_currency:
        type: number
      price_change_percentage_24h:
        type: number
      price_change_percentage_24h_in_currency:
        type: number
      sparkline_in_7d:
        properties:
          price:
            items:
              type: number
            type: array
        type: object
      symbol:
        type: string
    type: object
  response.CoinPriceHistoryResponse:
    properties:
      from:
        type: string
      prices:
        items:
          type: number
        type: array
      times:
        items:
          type: string
        type: array
      timestamps:
        items:
          type: integer
        type: array
      to:
        type: string
    type: object
  response.CollectionSuggestions:
    properties:
      address:
        type: string
      chain:
        type: string
      chain_id:
        type: integer
      name:
        type: string
      symbol:
        type: string
    type: object
  response.CompareTokenReponseData:
    properties:
      base_coin:
        $ref: '#/definitions/response.GetCoinResponse'
      base_coin_suggestions:
        items:
          $ref: '#/definitions/model.CoingeckoSupportedTokens'
        type: array
      from:
        type: string
      ratios:
        items:
          type: number
        type: array
      target_coin:
        $ref: '#/definitions/response.GetCoinResponse'
      target_coin_suggestions:
        items:
          $ref: '#/definitions/model.CoingeckoSupportedTokens'
        type: array
      times:
        items:
          type: string
        type: array
      to:
        type: string
    type: object
  response.CompareTokenResponse:
    properties:
      data:
        $ref: '#/definitions/response.CompareTokenReponseData'
    type: object
  response.ConfigGroupNFTRoleResponse:
    properties:
      group_name:
        type: string
      guild_id:
        type: string
      nft_collection_configs:
        items:
          $ref: '#/definitions/response.NFTCollectionConfig'
        type: array
      number_of_tokens:
        type: integer
      role_id:
        type: string
    type: object
  response.ConfigNotifyResponse:
    properties:
      channel_id:
        type: string
      created_at:
        type: string
      guild_id:
        type: string
      id:
        type: string
      token:
        type: string
      total_transaction:
        type: integer
      updated_at:
        type: string
    type: object
  response.ConfigureInvitesResponse:
    properties:
      data:
        type: string
    type: object
  response.CreateCommonwealthDiscussionSubscription:
    properties:
      data:
        $ref: '#/definitions/model.CommonwealthDiscussionSubscription'
    type: object
  response.CreateDaoProposalResponse:
    properties:
      data:
        $ref: '#/definitions/model.DaoProposal'
    type: object
  response.CreateEnvelop:
    properties:
      data:
        $ref: '#/definitions/model.Envelop'
    type: object
  response.CreateGuildMixRole:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigMixRole'
    type: object
  response.CreateGuildTokenRole:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigTokenRole'
    type: object
  response.CreateGuildXPRole:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigXPRole'
    type: object
  response.CreateNFTCollectionResponse:
    properties:
      data:
        $ref: '#/definitions/model.NFTCollection'
    type: object
  response.CreateProposalChannelConfigResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigDaoProposal'
    type: object
  response.CreateTradeOfferResponse:
    properties:
      data:
        $ref: '#/definitions/model.TradeOffer'
    type: object
  response.CreateTwitterSaleConfigResponse:
    properties:
      data:
        $ref: '#/definitions/model.SaleBotTwitterConfig'
    type: object
  response.CreateUserTokenSupportRequest:
    properties:
      data:
        $ref: '#/definitions/model.UserTokenSupportRequest'
    type: object
  response.CurrentUserUpvoteStreakResponse:
    properties:
      data:
        $ref: '#/definitions/response.GetUserCurrentUpvoteStreakResponse'
    type: object
  response.DaoTrackerSpaceCountData:
    properties:
      count:
        type: integer
      source:
        type: string
      space:
        type: string
    type: object
  response.DaoTrackerSpaceCountResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.DaoTrackerSpaceCountData'
        type: array
      metadata:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  response.DataFilterConfigByReaction:
    properties:
      data:
        $ref: '#/definitions/response.RoleReactionResponse'
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  response.DataListRoleReactionResponse:
    properties:
      data:
        $ref: '#/definitions/response.ListRoleReactionResponse'
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  response.DataMetric:
    properties:
      data:
        $ref: '#/definitions/response.Metric'
    type: object
  response.DefaultRole:
    properties:
      guild_id:
        type: string
      role_id:
        type: string
    type: object
  response.DefaultRoleResponse:
    properties:
      data:
        $ref: '#/definitions/response.DefaultRole'
    type: object
  response.DiscordGuildResponse:
    properties:
      bot_addable:
        type: boolean
      bot_arrived:
        type: boolean
      features:
        items:
          type: string
        type: array
      icon:
        type: string
      id:
        type: string
      name:
        type: string
      owner:
        type: boolean
      permissions:
        example: "0"
        type: string
    type: object
  response.DiscordGuildRole:
    properties:
      color:
        type: integer
      hoist:
        type: boolean
      icon:
        type: string
      id:
        type: string
      managed:
        type: boolean
      mentionable:
        type: boolean
      name:
        type: string
      permissions:
        type: string
      position:
        type: integer
      unicode_emoji:
        type: string
    type: object
  response.DiscordUserTokenAlertResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.DiscordUserTokenAlert'
        type: array
    type: object
  response.GasTrackerResponse:
    properties:
      chain:
        type: string
      est_fast_time:
        type: string
      est_propose_time:
        type: string
      est_safe_time:
        type: string
      fast_gas_price:
        type: string
      propose_gas_price:
        type: string
      safe_gas_price:
        type: string
    type: object
  response.GasTrackerResponseData:
    properties:
      data:
        items:
          $ref: '#/definitions/response.GasTrackerResponse'
        type: array
    type: object
  response.GenerateVerificationResponse:
    properties:
      code:
        type: string
      status:
        type: string
    type: object
  response.GetAllDaoProposalVotes:
    properties:
      proposal:
        $ref: '#/definitions/response.GetDaoProposalData'
      votes:
        items:
          $ref: '#/definitions/model.DaoVote'
        type: array
    type: object
  response.GetAllDaoProposals:
    properties:
      data:
        items:
          $ref: '#/definitions/model.DaoProposal'
        type: array
    type: object
  response.GetAllTwitterConfigResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigTwitterFeed'
        type: array
      message:
        type: string
    type: object
  response.GetAllTwitterHashtagConfigResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.TwitterHashtag'
        type: array
    type: object
  response.GetAllUserSubmittedAdResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.GetAllUserSubmittedAdResponse'
        type: array
    type: object
  response.GetCoinResponse:
    properties:
      asset_platform_id:
        type: string
      description:
        $ref: '#/definitions/response.CoinDescription'
      id:
        type: string
      image:
        $ref: '#/definitions/response.CoinImage'
      market_cap_rank:
        type: integer
      market_data:
        $ref: '#/definitions/response.MarketData'
      name:
        type: string
      symbol:
        type: string
      tickers:
        items:
          $ref: '#/definitions/response.TickerData'
        type: array
    type: object
  response.GetCoinResponseWrapper:
    properties:
      data:
        $ref: '#/definitions/response.GetCoinResponse'
    type: object
  response.GetCoinsMarketDataResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CoinMarketItemData'
        type: array
    type: object
  response.GetCollectionCountResponse:
    properties:
      data:
        $ref: '#/definitions/response.NFTCollectionCount'
    type: object
  response.GetDaoProposalData:
    properties:
      closed_at:
        type: string
      created_at:
        type: string
      creator_id:
        type: string
      description:
        type: string
      discussion_channel_id:
        type: string
      guild_config_dao_proposal_id:
        type: integer
      guild_id:
        type: string
      id:
        type: integer
      points:
        items:
          $ref: '#/definitions/model.DaoProposalVoteCount'
        type: array
      title:
        type: string
      updated_at:
        type: string
      voting_channel_id:
        type: string
    type: object
  response.GetDataUserProfileResponse:
    properties:
      data:
        $ref: '#/definitions/response.GetUserProfileResponse'
    type: object
  response.GetDefaultTokenResponse:
    properties:
      data:
        $ref: '#/definitions/model.Token'
    type: object
  response.GetDetailNftCollectionResponse:
    properties:
      data:
        $ref: '#/definitions/model.NFTCollectionDetail'
    type: object
  response.GetFiatHistoricalExchangeRatesResponse:
    properties:
      from:
        type: string
      latest_rate:
        type: number
      rates:
        items:
          type: number
        type: array
      times:
        items:
          type: string
        type: array
      to:
        type: string
    type: object
  response.GetGmConfigResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigGmGn'
      message:
        type: string
    type: object
  response.GetGuildConfigDaoProposal:
    properties:
      data:
        $ref: '#/definitions/response.GetGuildConfigDaoProposalData'
    type: object
  response.GetGuildConfigDaoProposalData:
    properties:
      address:
        type: string
      authority:
        type: string
      chain:
        type: string
      chain_id:
        type: integer
      created_at:
        type: string
      guideline_channel_id:
        type: string
      guild_id:
        type: string
      id:
        type: integer
      proposal_channel_id:
        type: string
      required_amount:
        type: string
      symbol:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  response.GetGuildDefaultNftTickerResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigDefaultCollection'
    type: object
  response.GetGuildDefaultTickerResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigDefaultTicker'
    type: object
  response.GetGuildLevelUpMessage:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigLevelupMessage'
    type: object
  response.GetGuildPruneExcludeResponse:
    properties:
      data:
        $ref: '#/definitions/response.GuildPruneExcludeList'
      message:
        type: string
    type: object
  response.GetGuildResponse:
    properties:
      active:
        type: boolean
      alias:
        type: string
      bot_scopes:
        items:
          type: string
        type: array
      global_xp:
        type: boolean
      icon:
        type: string
      id:
        type: string
      log_channel:
        type: string
      log_channel_id:
        type: string
      name:
        type: string
    type: object
  response.GetGuildTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Token'
        type: array
    type: object
  response.GetGuildUserResponse:
    properties:
      guild_id:
        type: string
      invited_by:
        type: string
      nickname:
        type: string
      user_id:
        type: string
    type: object
  response.GetGuildsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.GetGuildResponse'
        type: array
    type: object
  response.GetHistoricalMarketChartResponse:
    properties:
      data:
        $ref: '#/definitions/response.CoinPriceHistoryResponse'
    type: object
  response.GetInviteTrackerConfigResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigInviteTracker'
      message:
        type: string
    type: object
  response.GetInvitesLeaderboardResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.UserInvitesAggregation'
        type: array
    type: object
  response.GetInvitesResponse:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  response.GetLevelRoleConfigsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigLevelRole'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  response.GetLinkedTelegramResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserTelegramDiscordAssociation'
    type: object
  response.GetListAllChainsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Chain'
        type: array
    type: object
  response.GetMyInfoResponse:
    properties:
      data:
        $ref: '#/definitions/discordgo.User'
    type: object
  response.GetNFTActivityData:
    properties:
      data:
        items:
          $ref: '#/definitions/response.IndexerNFTActivityData'
        type: array
      metadata:
        $ref: '#/definitions/util.Pagination'
    type: object
  response.GetNFTActivityResponse:
    properties:
      data:
        $ref: '#/definitions/response.GetNFTActivityData'
    type: object
  response.GetNFTCollectionByAddressChain:
    properties:
      address:
        type: string
      author:
        type: string
      chain_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      discord:
        type: string
      erc_format:
        type: string
      id:
        type: string
      image:
        type: string
      is_verified:
        type: boolean
      marketplaces:
        items:
          type: string
        type: array
      name:
        type: string
      symbol:
        type: string
      twitter:
        type: string
      website:
        type: string
    type: object
  response.GetNFTCollectionByAddressChainResponse:
    properties:
      data:
        $ref: '#/definitions/response.GetNFTCollectionByAddressChain'
    type: object
  response.GetNftWatchlist:
    properties:
      floor_price:
        type: number
      id:
        type: string
      image:
        type: string
      is_pair:
        type: boolean
      name:
        type: string
      price_change_percentage_7d_in_currency:
        type: number
      price_change_percentage_24h:
        type: number
      sparkline_in_7d:
        $ref: '#/definitions/response.SparkLineIn7d'
      symbol:
        type: string
      token:
        $ref: '#/definitions/response.IndexerToken'
    type: object
  response.GetNftWatchlistResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.GetNftWatchlist'
        type: array
    type: object
  response.GetOnchainTransfersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.OnchainTipBotTransaction'
        type: array
    type: object
  response.GetOneWalletResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserWalletWatchlistItem'
    type: object
  response.GetRepostReactionConfigsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigRepostReaction'
        type: array
    type: object
  response.GetSaleTwitterConfigResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.SaleBotTwitterConfig'
        type: array
    type: object
  response.GetSalesTrackerConfigResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigSalesTracker'
        type: array
    type: object
  response.GetSoulBoundNFTResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.NftSoulbound'
        type: array
    type: object
  response.GetSuggestionNFTCollectionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CollectionSuggestions'
        type: array
    type: object
  response.GetSupportedChains:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  response.GetSupportedTokenResponse:
    properties:
      data:
        $ref: '#/definitions/model.Token'
    type: object
  response.GetSupportedTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Token'
        type: array
    type: object
  response.GetTrackingWalletsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.UserWalletWatchlistItem'
        type: array
    type: object
  response.GetTradeOfferResponse:
    properties:
      data:
        $ref: '#/definitions/model.TradeOffer'
    type: object
  response.GetTrendingSearch:
    properties:
      coins:
        items:
          $ref: '#/definitions/response.GetTrendingSearchCoin'
        type: array
      exchanges:
        description: this field coingecko return empty
    type: object
  response.GetTrendingSearchCoin:
    properties:
      item:
        $ref: '#/definitions/response.Coin'
    type: object
  response.GetTwitterBlackListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigTwitterBlacklist'
        type: array
    type: object
  response.GetTwitterHashtagConfigResponse:
    properties:
      data:
        $ref: '#/definitions/response.TwitterHashtag'
    type: object
  response.GetTwitterLeaderboardResponse:
    properties:
      data:
        $ref: '#/definitions/response.GetTwitterLeaderboardResponseData'
    type: object
  response.GetTwitterLeaderboardResponseData:
    properties:
      data:
        items:
          $ref: '#/definitions/model.TwitterPostStreak'
        type: array
      metadata:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  response.GetUpvoteTiersConfig:
    properties:
      data:
        items:
          $ref: '#/definitions/model.UpvoteStreakTier'
        type: array
      message:
        type: string
    type: object
  response.GetUserBalances:
    properties:
      balances:
        type: number
      balances_in_usd:
        type: number
      id:
        type: string
      name:
        type: string
      rate_in_usd:
        type: number
      symbol:
        type: string
    type: object
  response.GetUserBalancesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.GetUserBalances'
        type: array
    type: object
  response.GetUserCurrentGMStreakResponse:
    properties:
      data:
        $ref: '#/definitions/model.DiscordUserGMStreak'
    type: object
  response.GetUserCurrentUpvoteStreakResponse:
    properties:
      discord_id:
        type: string
      last_streak_time:
        type: string
      minutes_until_reset:
        type: number
      minutes_until_reset_discordbotlist:
        type: number
      minutes_until_reset_topgg:
        type: number
      streak_count:
        type: integer
      total_count:
        type: integer
    type: object
  response.GetUserEnvelopStreak:
    properties:
      data:
        $ref: '#/definitions/model.UserEnvelopStreak'
    type: object
  response.GetUserProfileResponse:
    properties:
      about_me:
        type: string
      current_level:
        $ref: '#/definitions/model.ConfigXpLevel'
      guild:
        $ref: '#/definitions/model.DiscordGuild'
      guild_rank:
        type: integer
      guild_xp:
        type: integer
      id:
        type: string
      next_level:
        $ref: '#/definitions/model.ConfigXpLevel'
      nr_of_actions:
        type: integer
      progress:
        type: number
      user_faction_xps:
        $ref: '#/definitions/model.UserFactionXpsMapping'
      user_wallet:
        $ref: '#/definitions/model.UserWallet'
    type: object
  response.GetUserQuestListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.QuestUserList'
        type: array
    type: object
  response.GetUserResponse:
    properties:
      data:
        $ref: '#/definitions/response.User'
    type: object
  response.GetUserSubmittedAdResponse:
    properties:
      ad_channel_id:
        type: string
      creator_id:
        type: string
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      introduction:
        type: string
      is_podtown_ad:
        type: boolean
      name:
        type: string
      string:
        type: string
    type: object
  response.GetUserUpvoteLeaderboardResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.DiscordUserUpvoteStreak'
        type: array
      message:
        type: string
    type: object
  response.GetUserWalletByGuildIDAddressResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserWallet'
    type: object
  response.GetVote:
    properties:
      data:
        $ref: '#/definitions/model.DaoVote'
    type: object
  response.GetVoteChannelConfigResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigVoteChannel'
      message:
        type: string
    type: object
  response.GetWatchlistResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.CoinMarketItemData'
        type: array
      metadata:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  response.GetWelcomeChannelConfigResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigWelcomeChannel'
      message:
        type: string
    type: object
  response.GuildConfigDaoTrackerResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigDaoTracker'
        type: array
    type: object
  response.GuildConfigDefaultCurrencyResponse:
    properties:
      created_at:
        type: string
      guild_id:
        type: string
      tip_bot_token:
        $ref: '#/definitions/model.OffchainTipBotToken'
      updated_at:
        type: string
    type: object
  response.GuildConfigTipRangeResponse:
    properties:
      created_at:
        type: string
      guild_id:
        type: string
      max:
        type: number
      min:
        type: number
      updated_at:
        type: string
    type: object
  response.GuildProposalUsageData:
    properties:
      guild_id:
        type: string
      guild_name:
        type: string
      is_active:
        type: boolean
      proposal_count:
        type: integer
    type: object
  response.GuildProposalUsageResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.GuildProposalUsageData'
        type: array
      metadata:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  response.GuildPruneExcludeList:
    properties:
      guild_id:
        type: string
      roles:
        items:
          type: string
        type: array
    type: object
  response.IndexerChain:
    properties:
      chain_id:
        type: integer
      is_evm:
        type: boolean
      name:
        type: string
      symbol:
        type: string
    type: object
  response.IndexerGetNFTTokenDetailResponseWithSuggestions:
    properties:
      data:
        $ref: '#/definitions/response.IndexerNFTTokenDetailData'
      default_symbol:
        $ref: '#/definitions/response.CollectionSuggestions'
      suggestions:
        items:
          $ref: '#/definitions/response.CollectionSuggestions'
        type: array
    type: object
  response.IndexerGetNFTTokenTickersResponse:
    properties:
      data:
        $ref: '#/definitions/response.IndexerNFTTokenTickersData'
    type: object
  response.IndexerGetNFTTokensResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.IndexerNFTTokenDetailData'
        type: array
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  response.IndexerNFTActivityData:
    properties:
      chain_id:
        type: integer
      contract_address:
        type: string
      created_time:
        type: string
      event_type:
        type: string
      from_address:
        type: string
      id:
        type: integer
      last_update_time:
        type: string
      listing_price:
        type: string
      listing_price_obj:
        $ref: '#/definitions/response.IndexerPrice'
      listing_status:
        type: string
      listing_type:
        type: string
      payment_token:
        type: integer
      platform_id:
        type: integer
      quantity:
        type: string
      sold_price:
        type: string
      sold_price_obj:
        $ref: '#/definitions/response.IndexerPrice'
      to_address:
        type: string
      token_id:
        type: string
      transaction_hash:
        type: string
    type: object
  response.IndexerNFTCollectionTickersData:
    properties:
      address:
        type: string
      chain:
        $ref: '#/definitions/response.IndexerChain'
      collection_image:
        type: string
      floor_price:
        $ref: '#/definitions/response.IndexerPrice'
      items:
        type: integer
      last_sale_price:
        $ref: '#/definitions/response.IndexerPrice'
      marketplaces:
        items:
          type: string
        type: array
      name:
        type: string
      owners:
        type: integer
      price_change_1d:
        type: string
      price_change_7d:
        type: string
      price_change_30d:
        type: string
      tickers:
        $ref: '#/definitions/response.IndexerTickers'
      total_volume:
        $ref: '#/definitions/response.IndexerPrice'
    type: object
  response.IndexerNFTCollectionTickersResponse:
    properties:
      data:
        $ref: '#/definitions/response.IndexerNFTCollectionTickersData'
    type: object
  response.IndexerNFTTokenAttribute:
    properties:
      collection_address:
        type: string
      count:
        type: integer
      frequency:
        type: string
      rarity:
        type: string
      token_id:
        type: string
      trait_type:
        type: string
      value:
        type: string
    type: object
  response.IndexerNFTTokenDetailData:
    properties:
      amount:
        type: string
      attributes:
        items:
          $ref: '#/definitions/response.IndexerNFTTokenAttribute'
        type: array
      collection_address:
        type: string
      description:
        type: string
      image:
        type: string
      image_cdn:
        type: string
      image_content_type:
        type: string
      marketplace:
        items:
          $ref: '#/definitions/response.NftListingMarketplace'
        type: array
      metadata_id:
        type: string
      name:
        type: string
      owner:
        $ref: '#/definitions/response.IndexerNftTokenOwner'
      rarity:
        $ref: '#/definitions/response.IndexerNFTTokenRarity'
      rarity_rank:
        type: integer
      rarity_score:
        type: string
      rarity_tier:
        type: string
      thumbnail_cdn:
        type: string
      token_id:
        type: string
    type: object
  response.IndexerNFTTokenRarity:
    properties:
      rank:
        type: integer
      rarity:
        type: string
      score:
        type: string
      total:
        type: integer
    type: object
  response.IndexerNFTTokenTickersData:
    properties:
      collection_address:
        type: string
      description:
        type: string
      floor_price:
        $ref: '#/definitions/response.IndexerPrice'
      image:
        type: string
      image_cdn:
        type: string
      last_sale_at:
        type: string
      last_sale_price:
        $ref: '#/definitions/response.IndexerPrice'
      name:
        type: string
      price_change_30d:
        type: string
      price_change_90d:
        type: string
      price_change_365d:
        type: string
      price_change_percentage_30d:
        type: string
      price_change_percentage_90d:
        type: string
      price_change_percentage_365d:
        type: string
      rarity_rank:
        type: integer
      rarity_score:
        type: string
      rarity_tier:
        type: string
      tickers:
        $ref: '#/definitions/response.IndexerTickers'
      token_id:
        type: string
    type: object
  response.IndexerNftTokenOwner:
    properties:
      collection_address:
        type: string
      owner_address:
        type: string
      token_id:
        type: string
    type: object
  response.IndexerPrice:
    properties:
      amount:
        type: string
      token:
        $ref: '#/definitions/response.IndexerToken'
    type: object
  response.IndexerTickers:
    properties:
      prices:
        items:
          $ref: '#/definitions/response.IndexerPrice'
        type: array
      times:
        items:
          type: string
        type: array
      timestamps:
        items:
          type: integer
        type: array
    type: object
  response.IndexerToken:
    properties:
      address:
        type: string
      decimals:
        type: integer
      is_native:
        type: boolean
      symbol:
        type: string
    type: object
  response.InvitesAggregationResponse:
    properties:
      data:
        $ref: '#/definitions/response.UserInvitesAggregation'
    type: object
  response.LinkUserTelegramWithDiscordResponse:
    properties:
      data:
        $ref: '#/definitions/response.LinkUserTelegramWithDiscordResponseData'
    type: object
  response.LinkUserTelegramWithDiscordResponseData:
    properties:
      discord_id:
        type: string
      discord_username:
        type: string
      telegram_username:
        type: string
    type: object
  response.ListAllCustomTokenResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Token'
        type: array
    type: object
  response.ListAllNFTCollectionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.NFTCollection'
        type: array
    type: object
  response.ListConfigNotifyResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.ConfigNotifyResponse'
        type: array
    type: object
  response.ListGuildGroupNFTRolesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.ListGuildNFTRoleConfigsResponse'
        type: array
    type: object
  response.ListGuildMixRoles:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigMixRole'
        type: array
    type: object
  response.ListGuildNFTRoleConfigsResponse:
    properties:
      color:
        type: integer
      group_name:
        type: string
      guild_id:
        type: string
      id:
        type: string
      nft_collection_configs:
        items:
          $ref: '#/definitions/response.NFTCollectionConfig'
        type: array
      number_of_tokens:
        type: integer
      role_id:
        type: string
      role_name:
        type: string
    type: object
  response.ListGuildTokenRoles:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigTokenRole'
        type: array
    type: object
  response.ListGuildXPRoles:
    properties:
      data:
        items:
          $ref: '#/definitions/model.GuildConfigXPRole'
        type: array
    type: object
  response.ListMyGuildsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.DiscordGuildResponse'
        type: array
    type: object
  response.ListRoleReactionResponse:
    properties:
      configs:
        items:
          $ref: '#/definitions/response.RoleReactionByMessage'
        type: array
      guild_id:
        type: string
      success:
        type: boolean
    type: object
  response.ListTokenPriceAlertResponse:
    properties:
      alert_type:
        type: string
      created_at:
        type: string
      currency:
        type: string
      frequency:
        type: string
      price:
        type: number
      snoozed_to:
        type: string
      symbol:
        type: string
      updated_at:
        type: string
      user_discord_id:
        type: string
    type: object
  response.LogoutResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  response.MarketData:
    properties:
      current_price:
        additionalProperties:
          type: number
        type: object
      market_cap:
        additionalProperties:
          type: number
        type: object
      price_change_percentage_1h_in_currency:
        additionalProperties:
          type: number
        type: object
      price_change_percentage_7d_in_currency:
        additionalProperties:
          type: number
        type: object
      price_change_percentage_24h_in_currency:
        additionalProperties:
          type: number
        type: object
    type: object
  response.Metric:
    properties:
      nft_collections:
        type: integer
      server_active_users:
        type: integer
      server_command_usage:
        type: integer
      server_token:
        items:
          type: string
        type: array
      server_token_supported:
        type: integer
      server_verified_wallets:
        type: integer
      total_active_users:
        type: integer
      total_command_usage:
        type: integer
      total_servers:
        type: integer
      total_token:
        items:
          type: string
        type: array
      total_token_supported:
        type: integer
      total_verified_wallets:
        type: integer
    type: object
  response.MonikerConfigData:
    properties:
      moniker:
        $ref: '#/definitions/model.MonikerConfig'
      value:
        type: number
    type: object
  response.MonikerConfigResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.MonikerConfigData'
        type: array
    type: object
  response.NFTChainCollectionCount:
    properties:
      chain:
        $ref: '#/definitions/model.Chain'
      count:
        type: integer
    type: object
  response.NFTCollectionConfig:
    properties:
      address:
        type: string
      author:
        type: string
      chain_id:
        type: string
      chain_name:
        type: string
      collection_id:
        type: string
      created_at:
        type: string
      erc_format:
        type: string
      explorer_url:
        type: string
      id:
        type: string
      image:
        type: string
      is_verified:
        type: boolean
      name:
        type: string
      symbol:
        type: string
    type: object
  response.NFTCollectionCount:
    properties:
      data:
        items:
          $ref: '#/definitions/response.NFTChainCollectionCount'
        type: array
      total:
        type: integer
    type: object
  response.NFTCollectionsData:
    properties:
      data:
        items:
          $ref: '#/definitions/model.NFTCollection'
        type: array
      metadata:
        $ref: '#/definitions/util.Pagination'
    type: object
  response.NFTCollectionsResponse:
    properties:
      data:
        $ref: '#/definitions/response.NFTCollectionsData'
    type: object
  response.NFTNewListed:
    properties:
      data:
        items:
          $ref: '#/definitions/model.NewListedNFTCollection'
        type: array
      metadata:
        $ref: '#/definitions/util.Pagination'
    type: object
  response.NFTNewListedResponse:
    properties:
      data:
        $ref: '#/definitions/response.NFTNewListed'
    type: object
  response.NFTTradingVolume:
    properties:
      collection_address:
        type: string
      collection_chain_id:
        type: number
      collection_name:
        type: string
      collection_symbol:
        type: string
      token:
        type: string
      trading_volume:
        type: number
    type: object
  response.NFTTradingVolumeResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.NFTTradingVolume'
        type: array
    type: object
  response.NewGuildConfigWalletVerificationMessageResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigWalletVerificationMessage'
      status:
        type: string
    type: object
  response.NewGuildGroupNFTRoleResponse:
    properties:
      data:
        $ref: '#/definitions/response.ConfigGroupNFTRoleResponse'
      message:
        type: string
    type: object
  response.NftListingMarketplace:
    properties:
      contract_address:
        type: string
      floor_price:
        type: string
      item_url:
        type: string
      listing_price:
        type: string
      listing_status:
        type: string
      payment_token:
        type: string
      payment_token_decimals:
        type: string
      platform_id:
        type: integer
      platform_name:
        type: string
      token_id:
        type: string
    type: object
  response.NftMetadataAttrIcon:
    properties:
      discord_icon:
        type: string
      id:
        type: integer
      trait_type:
        type: string
      unicode_icon:
        type: string
    type: object
  response.NftMetadataAttrIconResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.NftMetadataAttrIcon'
        type: array
    type: object
  response.NftSales:
    properties:
      buyer:
        type: string
      nft_collection_address:
        type: string
      nft_name:
        type: string
      nft_price:
        type: number
      nft_price_token:
        type: string
      nft_status:
        type: string
      platform:
        type: string
      seller:
        type: string
    type: object
  response.NftSalesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.NftSales'
        type: array
    type: object
  response.NftWatchlistSuggest:
    properties:
      default_symbol:
        $ref: '#/definitions/response.CollectionSuggestions'
      suggestions:
        items:
          $ref: '#/definitions/response.CollectionSuggestions'
        type: array
    type: object
  response.NftWatchlistSuggestResponse:
    properties:
      data:
        $ref: '#/definitions/response.NftWatchlistSuggest'
    type: object
  response.OffchainTipBotTransferToken:
    properties:
      amount_each:
        description: |-
          SenderID    string  `json:"sender_id"`
          Recipients  string  `json:"recipient_id"`
        type: number
      total_amount:
        type: number
    type: object
  response.OffchainTipBotTransferTokenResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.OffchainTipBotTransferToken'
        type: array
    type: object
  response.PaginationResponse:
    properties:
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  response.ResponseDataMessage:
    properties:
      data:
        $ref: '#/definitions/response.ResponseMessage'
    type: object
  response.ResponseMessage:
    properties:
      message:
        type: string
    type: object
  response.ResponseStatus:
    properties:
      status:
        type: string
    type: object
  response.ResponseSucess:
    properties:
      success:
        type: boolean
    type: object
  response.Role:
    properties:
      id:
        type: string
      reaction:
        type: string
    type: object
  response.RoleReactionByMessage:
    properties:
      channel_id:
        type: string
      message_id:
        type: string
      roles:
        items:
          $ref: '#/definitions/response.Role'
        type: array
    type: object
  response.RoleReactionConfigResponse:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      message_id:
        type: string
      roles:
        items:
          $ref: '#/definitions/response.Role'
        type: array
      success:
        type: boolean
    type: object
  response.RoleReactionResponse:
    properties:
      channel_id:
        type: string
      guild_id:
        type: string
      message_id:
        type: string
      role:
        $ref: '#/definitions/response.Role'
    type: object
  response.RouteElement:
    properties:
      amountOut:
        type: string
      exchange:
        type: string
      extra: {}
      limitReturnAmount:
        type: string
      pool:
        type: string
      poolExtra: {}
      poolLength:
        type: integer
      poolType:
        type: string
      swapAmount:
        type: string
      tokenIn:
        type: string
      tokenOut:
        type: string
      tokenOutSymbol:
        type: string
    type: object
  response.RouteSummary:
    properties:
      amountIn:
        type: string
      amountInUsd:
        type: string
      amountOut:
        type: string
      amountOutUsd:
        type: string
      extraFee:
        $ref: '#/definitions/model.ExtraFee'
      gas:
        type: string
      gasPrice:
        type: string
      gasUsd:
        type: string
      route:
        items:
          items:
            $ref: '#/definitions/response.RouteElement'
          type: array
        type: array
      tokenIn:
        type: string
      tokenInMarketPriceAvailable:
        type: boolean
      tokenOut:
        type: string
      tokenOutMarketPriceAvailable:
        type: boolean
    type: object
  response.SearchCoinResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.CoingeckoSupportedTokens'
        type: array
    type: object
  response.SparkLineIn7d:
    properties:
      price:
        items:
          type: number
        type: array
    type: object
  response.SubmitOnchainTransfer:
    properties:
      amount:
        type: number
      amount_in_usd:
        type: number
      recipient_id:
        type: string
      sender_id:
        type: string
      symbol:
        type: string
    type: object
  response.SubmitOnchainTransferResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/response.SubmitOnchainTransfer'
        type: array
    type: object
  response.SwapRoute:
    properties:
      routeSummary:
        $ref: '#/definitions/response.RouteSummary'
      routerAddress:
        type: string
      tokenIn:
        $ref: '#/definitions/model.KyberswapSupportedToken'
      tokenOut:
        $ref: '#/definitions/model.KyberswapSupportedToken'
    type: object
  response.SwapRouteResponse:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/response.SwapRoute'
      message:
        type: string
    type: object
  response.SwapRouteResponseData:
    properties:
      data:
        $ref: '#/definitions/response.SwapRouteResponse'
    type: object
  response.TickerData:
    properties:
      base:
        type: string
      coin_id:
        type: string
      last:
        type: number
      target:
        type: string
      target_coin_id:
        type: string
    type: object
  response.ToggleActivityConfigResponse:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigActivity'
      message:
        type: string
    type: object
  response.TokenHolderStatus:
    properties:
      data:
        $ref: '#/definitions/response.TokenHolderStatusData'
    type: object
  response.TokenHolderStatusData:
    properties:
      guild_config:
        $ref: '#/definitions/model.GuildConfigDaoProposal'
      is_qualified:
        type: boolean
      is_wallet_connected:
        type: boolean
      user_holding_amount:
        type: string
      vote_config:
        $ref: '#/definitions/model.DaoProposalVoteOption'
    type: object
  response.TokenPriceAlertResponseData:
    properties:
      alert_type:
        type: string
      currency:
        type: string
      frequency:
        type: string
      price_by_percent:
        type: number
      snoozed_to:
        type: string
      symbol:
        type: string
      user_discord_id:
        type: string
      value:
        type: number
    type: object
  response.TopUser:
    properties:
      author:
        $ref: '#/definitions/model.GuildUserXP'
      leaderboard:
        items:
          $ref: '#/definitions/model.GuildUserXP'
        type: array
      metadata:
        $ref: '#/definitions/response.PaginationResponse'
    type: object
  response.TransactionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.OffchainTipBotTransferHistory'
        type: array
    type: object
  response.TwitterHashtag:
    properties:
      channel_id:
        type: string
      created_at:
        type: string
      from_twitter:
        items:
          type: string
        type: array
      guild_id:
        type: string
      hashtag:
        items:
          type: string
        type: array
      rule_id:
        type: string
      twitter_username:
        items:
          type: string
        type: array
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  response.UpdateGuildTokenRole:
    properties:
      data:
        $ref: '#/definitions/model.GuildConfigTokenRole'
    type: object
  response.UpdateUserFeedbackResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserFeedback'
    type: object
  response.UpdateVote:
    properties:
      data:
        $ref: '#/definitions/model.DaoVote'
    type: object
  response.User:
    properties:
      discriminator:
        type: string
      guild_users:
        items:
          $ref: '#/definitions/response.GetGuildUserResponse'
        type: array
      id:
        type: string
      nr_of_join:
        type: integer
      username:
        type: string
    type: object
  response.UserDeviceResponse:
    properties:
      device_id:
        type: string
      ios_noti_token:
        type: string
    type: object
  response.UserFeedbackResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.UserFeedback'
        type: array
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  response.UserInvitesAggregation:
    properties:
      fake:
        type: integer
      inviter_id:
        type: string
      left:
        type: integer
      regular:
        type: integer
    type: object
  response.UserTransactionResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.OffchainTipBotTransferHistory'
        type: array
    type: object
  util.Pagination:
    properties:
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  uuid.NullUUID:
    properties:
      uuid:
        type: string
      valid:
        description: Valid is true if UUID is not NULL
        type: boolean
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a swagger for mochi api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.LoginResponse'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LogoutResponse'
      summary: Logout
      tags:
      - Auth
  /cache/upvote:
    post:
      consumes:
      - application/json
      description: Set or overwrite an upvote message cache
      parameters:
      - description: Set upvote message cache request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SetUpvoteMessageCacheRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Set or overwrite an upvote message cache
      tags:
      - Cache
  /community/advertise:
    delete:
      consumes:
      - application/json
      description: Delete ad submission
      parameters:
      - in: query
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete ad submission
      tags:
      - Community
    get:
      consumes:
      - application/json
      description: Get submitted ad
      parameters:
      - description: ad's id, or 'random'
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserSubmittedAdResponse'
      summary: Get submitted ad
      tags:
      - Community
    post:
      consumes:
      - application/json
      description: Create ad submission
      parameters:
      - in: query
        name: creator_id
        type: string
      - in: query
        name: description
        type: string
      - in: query
        name: image
        type: string
      - in: query
        name: introduction
        type: string
      - in: query
        name: is_podtown_ad
        type: boolean
      - in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create ad submission
      tags:
      - Community
    put:
      consumes:
      - application/json
      description: Update ad submission
      parameters:
      - in: query
        name: id
        type: integer
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Update ad submission
      tags:
      - Community
  /community/advertise/init:
    post:
      consumes:
      - application/json
      description: Init ad submission
      parameters:
      - in: query
        name: channel_id
        type: string
      - in: query
        name: guild_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Init ad submission
      tags:
      - Community
  /community/feedback:
    get:
      consumes:
      - application/json
      description: Get users' feedbacks
      parameters:
      - description: filter by
        in: query
        name: filter
        type: string
      - description: filtered value
        in: query
        name: value
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserFeedbackResponse'
      summary: Get users' feedbacks
      tags:
      - Community
    post:
      consumes:
      - application/json
      description: Post users' feedbacks
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UserFeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Post users' feedbacks
      tags:
      - Community
    put:
      consumes:
      - application/json
      description: Update users' feedbacks
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UpdateUserFeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateUserFeedbackResponse'
      summary: Update users' feedbacks
      tags:
      - Community
  /community/invites/:
    get:
      consumes:
      - application/json
      description: Get invites
      parameters:
      - description: Member ID
        in: query
        name: member_id
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetInvitesResponse'
      summary: Get invites
      tags:
      - Community
  /community/invites/aggregation:
    get:
      consumes:
      - application/json
      description: Invites Aggregation
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      - description: Inviter ID
        in: query
        name: inviter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.InvitesAggregationResponse'
      summary: Invites Aggregation
      tags:
      - Community
  /community/invites/config:
    get:
      consumes:
      - application/json
      description: Get invites tracker config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetInviteTrackerConfigResponse'
      summary: Get invites tracker config
      tags:
      - Community
    post:
      consumes:
      - application/json
      description: Configure invites
      parameters:
      - description: Configure Invites request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigureInviteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ConfigureInvitesResponse'
      summary: Configure invites
      tags:
      - Community
  /community/invites/leaderboard/{id}:
    get:
      consumes:
      - application/json
      description: Get invites leaderboard
      parameters:
      - description: Guild ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetInvitesLeaderboardResponse'
      summary: Get invites leaderboard
      tags:
      - Community
  /community/levelup:
    delete:
      consumes:
      - application/json
      description: Delete levelup message
      parameters:
      - in: query
        name: guild_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete levelup message
      tags:
      - Community
    get:
      consumes:
      - application/json
      description: Get levelup message
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildLevelUpMessage'
      summary: Get levelup message
      tags:
      - Community
    post:
      consumes:
      - application/json
      description: Upsert levelup message
      parameters:
      - in: query
        name: channel_id
        type: string
      - in: query
        name: guild_id
        type: string
      - in: query
        name: image_url
        type: string
      - in: query
        name: message
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildLevelUpMessage'
      summary: Upsert levelup message
      tags:
      - Community
  /community/quests:
    get:
      consumes:
      - application/json
      description: Get user quest list
      parameters:
      - in: query
        name: routine
        type: string
      - in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserQuestListResponse'
      summary: Get user quest list
      tags:
      - Community
  /community/quests/claim:
    post:
      consumes:
      - application/json
      description: Claim user quests' rewards
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.ClaimQuestsRewardsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ClaimQuestsRewardsResponse'
      summary: Claim user quests' rewards
      tags:
      - Community
  /community/quests/progress:
    post:
      consumes:
      - application/json
      description: Update user's quest progress
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UpdateQuestProgressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Update user's quest progress
      tags:
      - Community
  /community/repost-reactions:
    delete:
      consumes:
      - application/json
      description: Remove Respost reaction config
      parameters:
      - description: Remove repost reaction config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigRepostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove Respost reaction config
      tags:
      - Community
    post:
      consumes:
      - application/json
      description: Config Respost reaction
      parameters:
      - description: Config repost reaction request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigRepostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Config Respost reaction
      tags:
      - Community
  /community/repost-reactions/{guild_id}:
    get:
      consumes:
      - application/json
      description: Get Respost reaction configs
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetRepostReactionConfigsResponse'
      summary: Get Respost reaction configs
      tags:
      - Community
  /community/repost-reactions/blacklist-channel:
    delete:
      consumes:
      - application/json
      description: Delete blacklist channel repost config
      parameters:
      - description: Delete blacklist channel repost config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.BalcklistChannelRepostConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete blacklist channel repost config
      tags:
      - Community
    get:
      consumes:
      - application/json
      description: Get guild blacklist channel repost config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Get guild blacklist channel repost config
      tags:
      - Community
    post:
      consumes:
      - application/json
      description: Create blacklist channel repost config
      parameters:
      - description: Upsert join-leave channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.BalcklistChannelRepostConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create blacklist channel repost config
      tags:
      - Community
  /community/repost-reactions/conversation:
    post:
      consumes:
      - application/json
      description: Config Respost reaction with start stop
      parameters:
      - description: Config repost reaction start stop request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigRepostReactionStartStop'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Config Respost reaction with start stop
      tags:
      - Community
  /community/repost-reactions/message-repost:
    put:
      consumes:
      - application/json
      description: edit message repost
      parameters:
      - description: edit message repost request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.EditMessageRepostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: edit message repost
      tags:
      - Community
  /community/tagme:
    get:
      consumes:
      - application/json
      description: Get tagme
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Get tagme
      tags:
      - Community
    post:
      consumes:
      - application/json
      description: Upsert user tag
      parameters:
      - description: Upsert user tag request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.UpsertUserTag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Upsert user tag
      tags:
      - Community
  /community/twitter:
    post:
      consumes:
      - application/json
      description: Create twitter post
      parameters:
      - description: Create twitter post request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.TwitterPost'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create twitter post
      tags:
      - Community
  /community/twitter/top:
    get:
      consumes:
      - application/json
      description: Create twitter post
      parameters:
      - in: query
        name: guild_id
        required: true
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTwitterLeaderboardResponse'
      summary: Create twitter post
      tags:
      - Community
  /config-channels/{guild_id}/proposal:
    get:
      consumes:
      - application/json
      description: Get dao proposal channel config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildConfigDaoProposal'
      summary: Get dao proposal channel config
      tags:
      - ConfigChannel
  /config-channels/dao-tracker:
    delete:
      consumes:
      - application/json
      description: Delete dao tracker config
      parameters:
      - description: Delete dao tracker channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteGuildConfigDaoTracker'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete dao tracker channel config
      tags:
      - ConfigChannel
    post:
      consumes:
      - application/json
      description: Create tracker channel config for dao voting
      parameters:
      - description: Create tracker channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertGuildConfigDaoTracer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create tracker channel config
      tags:
      - ConfigChannel
  /config-channels/dao-tracker/{guild_id}:
    get:
      consumes:
      - application/json
      description: Get dao tracker channel config
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GuildConfigDaoTrackerResponse'
      summary: Get dao tracker channel config
      tags:
      - ConfigChannel
  /config-channels/dao-tracker/cw-discussion-subs:
    post:
      consumes:
      - application/json
      description: Subscribe commonwealth discussion
      parameters:
      - description: Create cw discussion subscription request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateCommonwealthDiscussionSubscription'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateCommonwealthDiscussionSubscription'
      summary: Subscribe commonwealth discussion
      tags:
      - Data
  /config-channels/gm:
    get:
      consumes:
      - application/json
      description: Get GM config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGmConfigResponse'
      summary: Get GM config
      tags:
      - ConfigChannel
    post:
      consumes:
      - application/json
      description: Update or insert GM config
      parameters:
      - description: Upsert GM Config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertGmConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Update or insert GM config
      tags:
      - ConfigChannel
  /config-channels/join-leave:
    delete:
      consumes:
      - application/json
      description: Delete join-leave channel config
      parameters:
      - description: Delete join-leave channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteJoinLeaveChannelConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete join-leave channel config
      tags:
      - ConfigChannel
    get:
      consumes:
      - application/json
      description: Get join-leave channel config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetVoteChannelConfigResponse'
      summary: Get join-leave channel config
      tags:
      - ConfigChannel
    post:
      consumes:
      - application/json
      description: Update or insert join-leave channel config
      parameters:
      - description: Upsert join-leave channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertJoinLeaveChannelConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetVoteChannelConfigResponse'
      summary: Update or insert join-leave channel config
      tags:
      - ConfigChannel
  /config-channels/proposal:
    delete:
      consumes:
      - application/json
      description: Delete dao proposal config
      parameters:
      - description: Delete dao proposal channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteGuildConfigDaoProposal'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete dao proposal channel config
      tags:
      - ConfigChannel
    post:
      consumes:
      - application/json
      description: Create proposal channel config for dao voting
      parameters:
      - description: Create proposal channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateProposalChannelConfig'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateProposalChannelConfigResponse'
      summary: Create proposal channel config
      tags:
      - ConfigChannel
  /config-channels/tip-notify:
    get:
      consumes:
      - application/json
      description: API get list config notify channel for token
      parameters:
      - description: guild id
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListConfigNotifyResponse'
      summary: OffChain Tip Bot - Config notify
      tags:
      - ConfigChannel
    post:
      consumes:
      - application/json
      description: API config notify channel for token
      parameters:
      - description: config notify request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateTipConfigNotify'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: OffChain Tip Bot - Config notify
      tags:
      - ConfigChannel
  /config-channels/tip-notify/{id}:
    delete:
      consumes:
      - application/json
      description: API delete config notify channel for token
      parameters:
      - description: id of config notify
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: OffChain Tip Bot - Config notify
      tags:
      - ConfigChannel
  /config-channels/upvote:
    delete:
      consumes:
      - application/json
      description: Delete vote channel config
      parameters:
      - description: Delete vote channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteVoteChannelConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete vote channel config
      tags:
      - ConfigChannel
    get:
      consumes:
      - application/json
      description: Get vote channel config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetVoteChannelConfigResponse'
      summary: Get vote channel config
      tags:
      - ConfigChannel
    post:
      consumes:
      - application/json
      description: Update or insert vote channel config
      parameters:
      - description: Upsert vote channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertVoteChannelConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetVoteChannelConfigResponse'
      summary: Update or insert vote channel config
      tags:
      - ConfigChannel
  /config-channels/welcome:
    delete:
      consumes:
      - application/json
      description: Delete welcome channel config
      parameters:
      - description: Delete welcome channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteWelcomeConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete welcome channel config
      tags:
      - ConfigChannel
    get:
      consumes:
      - application/json
      description: Get welcome channel config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetWelcomeChannelConfigResponse'
      summary: Get welcome channel config
      tags:
      - ConfigChannel
    post:
      consumes:
      - application/json
      description: Update or insert welcome channel config
      parameters:
      - description: Upsert welcome channel config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertWelcomeConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetWelcomeChannelConfigResponse'
      summary: Update or insert welcome channel config
      tags:
      - ConfigChannel
  /config-community/telegram:
    get:
      consumes:
      - application/json
      description: Get telegram account linked with discord ID
      parameters:
      - description: request
        in: query
        name: telegram_username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetLinkedTelegramResponse'
      summary: Get telegram account linked with discord ID
      tags:
      - ConfigCommunity
    post:
      consumes:
      - application/json
      description: Link user's telegram with discord account
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.LinkUserTelegramWithDiscordRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/response.LinkUserTelegramWithDiscordResponse'
      summary: Link user's telegram with discord account
      tags:
      - ConfigCommunity
  /config-community/twitter:
    post:
      consumes:
      - application/json
      description: Create twitter config
      parameters:
      - description: Create Twitter config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/model.GuildConfigTwitterFeed'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create twitter config
      tags:
      - ConfigCommunity
  /config-community/twitter/blacklist:
    delete:
      consumes:
      - application/json
      description: Delete an user from twitter watching blacklist
      parameters:
      - in: query
        name: guild_id
        required: true
        type: string
      - in: query
        name: twitter_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Delete an user from twitter watching blacklist
      tags:
      - ConfigCommunity
    get:
      consumes:
      - application/json
      description: get twitter blacklist
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTwitterBlackListResponse'
      summary: Get twitter blacklist
      tags:
      - ConfigCommunity
    post:
      consumes:
      - application/json
      description: Add an user to twitter watching blacklist
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.AddToTwitterBlackListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Add an user to twitter watching blacklist
      tags:
      - ConfigCommunity
  /config-community/twitter/hashtag:
    get:
      consumes:
      - application/json
      description: get all twitter hashtag config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAllTwitterHashtagConfigResponse'
      summary: Get all twitter hashtag config
      tags:
      - ConfigCommunity
    post:
      consumes:
      - application/json
      description: Create twitter hashtag config
      parameters:
      - description: Create twitter hashtag config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.TwitterHashtag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create twitter hashtag config
      tags:
      - ConfigCommunity
  /config-community/twitter/hashtag/{guild_id}:
    delete:
      consumes:
      - application/json
      description: Delete twitter hashtag config
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete twitter hashtag config
      tags:
      - ConfigCommunity
    get:
      consumes:
      - application/json
      description: get twitter hashtag config
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTwitterHashtagConfigResponse'
      summary: Get twitter hashtag config
      tags:
      - ConfigCommunity
  /config-defi/custom-tokens:
    post:
      consumes:
      - application/json
      description: Guild custom token config
      parameters:
      - description: Custom guild custom token config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertCustomTokenConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Guild custom token config
      tags:
      - ConfigDefi
  /config-defi/default-currency:
    delete:
      consumes:
      - application/json
      description: Delete default currency
      parameters:
      - description: Delete default currency config
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GuildIDRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete default currency
      tags:
      - ConfigDefi
    get:
      consumes:
      - application/json
      description: Get default currency by guild id
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GuildConfigDefaultCurrencyResponse'
      summary: Get default currency by guild id
      tags:
      - ConfigDefi
    post:
      consumes:
      - application/json
      description: Upsert default currency
      parameters:
      - description: Upsert default currency config
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertGuildDefaultCurrencyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Upsert default currency
      tags:
      - ConfigDefi
  /config-defi/default-symbol:
    post:
      consumes:
      - application/json
      description: Create default collection symbol
      parameters:
      - description: Config Default Collection Symbol request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigDefaultCollection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create default collection symbol
      tags:
      - ConfigDefi
  /config-defi/default-ticker:
    get:
      consumes:
      - application/json
      description: Get guild default ticker
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      - description: Guild ticker query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildDefaultTickerResponse'
      summary: Get guild default ticker
      tags:
      - ConfigDefi
    post:
      consumes:
      - application/json
      description: Set guild default ticker
      parameters:
      - description: Set guild default ticker request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GuildConfigDefaultTickerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Set guild default ticker
      tags:
      - ConfigDefi
  /config-defi/monikers:
    delete:
      consumes:
      - application/json
      description: Delete moniker config
      parameters:
      - description: Delete moinker config
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteMonikerConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete moniker config
      tags:
      - ConfigDefi
    post:
      consumes:
      - application/json
      description: Upsert moniker config
      parameters:
      - description: Upsert moniker config
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertMonikerConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Upsert moniker config
      tags:
      - ConfigDefi
  /config-defi/monikers/{guild_id}:
    get:
      consumes:
      - application/json
      description: Get moniker configs
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MonikerConfigResponse'
      summary: Get moniker configs
      tags:
      - ConfigDefi
  /config-defi/monikers/default:
    get:
      consumes:
      - application/json
      description: Get default moniker
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MonikerConfigResponse'
      summary: Get default moniker
      tags:
      - ConfigDefi
  /config-defi/tip-range:
    post:
      consumes:
      - application/json
      description: Upsert config tip range
      parameters:
      - description: Upsert config tip range
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertGuildConfigTipRangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GuildConfigTipRangeResponse'
      summary: Upsert config tip range
      tags:
      - ConfigDefi
  /config-defi/tip-range/{guild_id}:
    delete:
      consumes:
      - application/json
      description: Remove config tip range
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove config tip range
      tags:
      - ConfigDefi
    get:
      consumes:
      - application/json
      description: Get config tip range by guild id
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GuildConfigTipRangeResponse'
      summary: Get config tip range by guild id
      tags:
      - ConfigDefi
  /config-defi/tokens:
    get:
      consumes:
      - application/json
      description: Get guild tokens
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildTokensResponse'
      summary: Get guild tokens
      tags:
      - ConfigDefi
    post:
      consumes:
      - application/json
      description: Update or insert guild token config
      parameters:
      - description: Upsert Guild Token Config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertGuildTokenConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Update or insert guild token config
      tags:
      - ConfigDefi
  /config-defi/tokens/default:
    delete:
      consumes:
      - application/json
      description: Remove Default token
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove Default token
      tags:
      - ConfigDefi
    get:
      consumes:
      - application/json
      description: Get Default token
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetDefaultTokenResponse'
      summary: Get Default token
      tags:
      - ConfigDefi
    post:
      consumes:
      - application/json
      description: Config Default token
      parameters:
      - description: Config default token request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigDefaultTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Config Default token
      tags:
      - ConfigDefi
  /config-roles/default-roles:
    delete:
      consumes:
      - application/json
      description: Delete default role
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseSucess'
      summary: Delete default role
      tags:
      - ConfigRole
    get:
      consumes:
      - application/json
      description: Get default roles by guild id
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DefaultRoleResponse'
      summary: Get default roles by guild id
      tags:
      - ConfigRole
    post:
      consumes:
      - application/json
      description: Create default role
      parameters:
      - description: Create default role request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateDefaultRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DefaultRoleResponse'
      summary: Create default role
      tags:
      - ConfigRole
  /config-roles/level-roles:
    post:
      consumes:
      - application/json
      description: Config level role
      parameters:
      - description: Config level role request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigLevelRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Config Level role
      tags:
      - ConfigRole
  /config-roles/level-roles/{guild_id}:
    delete:
      consumes:
      - application/json
      description: Remove level role config
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove level role config
      tags:
      - ConfigRole
    get:
      consumes:
      - application/json
      description: Get level role config
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetLevelRoleConfigsResponse'
      summary: Get level role config
      tags:
      - ConfigRole
  /config-roles/mix-roles:
    post:
      consumes:
      - application/json
      description: Create guild Mix role config
      parameters:
      - description: Create guild Mix role config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateGuildMixRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateGuildMixRole'
      summary: Create guild Mix role config
      tags:
      - ConfigRole
  /config-roles/mix-roles/:
    get:
      consumes:
      - application/json
      description: Get list Mix role config of guild
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListGuildMixRoles'
      summary: Get list Mix role config of guild
      tags:
      - ConfigRole
  /config-roles/mix-roles/{id}:
    delete:
      consumes:
      - application/json
      description: Remove guild Mix role config
      parameters:
      - description: Config ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove guild Mix role config
      tags:
      - ConfigRole
  /config-roles/nft-roles:
    delete:
      consumes:
      - application/json
      description: Remove guild nft role
      parameters:
      - description: 32951e68-9959-4e1d-88ca-22b442e19efe|45d06941-468b-4e5e-8b8f-d20c77c87805
        in: query
        name: config_ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove guild nft role
      tags:
      - ConfigRole
    get:
      consumes:
      - application/json
      description: List guild nft roles
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListGuildGroupNFTRolesResponse'
      summary: List guild nft roles
      tags:
      - ConfigRole
    post:
      consumes:
      - application/json
      description: New guild nft role
      parameters:
      - description: New NFT role request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ConfigGroupNFTRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewGuildGroupNFTRoleResponse'
      summary: New guild nft role
      tags:
      - ConfigRole
  /config-roles/nft-roles/group:
    delete:
      consumes:
      - application/json
      description: Remove guild group nft role
      parameters:
      - description: Group config ID
        in: query
        name: group_config_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove guild group nft role
      tags:
      - ConfigRole
  /config-roles/reaction-roles:
    delete:
      consumes:
      - application/json
      description: Remove reaction role config
      parameters:
      - description: Remove reaction role config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.RoleReactionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseSucess'
      summary: Remove reaction role config
      tags:
      - ConfigRole
    get:
      consumes:
      - application/json
      description: Get all role reaction configs
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DataListRoleReactionResponse'
      summary: Get all role reaction configs
      tags:
      - ConfigRole
    post:
      consumes:
      - application/json
      description: Add reaction role config
      parameters:
      - description: Add reaction role config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.RoleReactionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.RoleReactionConfigResponse'
      summary: Add reaction role config
      tags:
      - ConfigRole
  /config-roles/reaction-roles/filter:
    post:
      consumes:
      - application/json
      description: Filter config by reaction
      parameters:
      - description: Filter config by reaction request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.RoleReactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DataFilterConfigByReaction'
      summary: Filter config by reaction
      tags:
      - ConfigRole
  /config-roles/token-roles:
    post:
      consumes:
      - application/json
      description: Create guild token role config
      parameters:
      - description: Create guild token role config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateGuildTokenRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateGuildTokenRole'
      summary: Create guild token role config
      tags:
      - ConfigRole
  /config-roles/token-roles/{guild_id}:
    get:
      consumes:
      - application/json
      description: Get list token role config of guild
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListGuildTokenRoles'
      summary: Get list token role config of guild
      tags:
      - ConfigRole
  /config-roles/token-roles/{id}:
    delete:
      consumes:
      - application/json
      description: Remove guild token role config
      parameters:
      - description: Config ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove guild token role config
      tags:
      - ConfigRole
    put:
      consumes:
      - application/json
      description: Update guild token role config
      parameters:
      - description: Config ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateGuildTokenRole'
      summary: Update guild token role config
      tags:
      - ConfigRole
  /config-roles/xp-roles:
    post:
      consumes:
      - application/json
      description: Create guild XP role config
      parameters:
      - description: Create guild XP role config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateGuildXPRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateGuildXPRole'
      summary: Create guild XP role config
      tags:
      - ConfigRole
  /config-roles/xp-roles/:
    get:
      consumes:
      - application/json
      description: Get list XP role config of guild
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListGuildXPRoles'
      summary: Get list XP role config of guild
      tags:
      - ConfigRole
  /config-roles/xp-roles/{id}:
    delete:
      consumes:
      - application/json
      description: Remove guild XP role config
      parameters:
      - description: Config ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove guild XP role config
      tags:
      - ConfigRole
  /configs/nft-roles/group:
    delete:
      consumes:
      - application/json
      description: Remove guild group nft role
      parameters:
      - description: Group config ID
        in: query
        name: group_config_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Remove guild group nft role
      tags:
      - Config
  /configs/sales-tracker:
    get:
      consumes:
      - application/json
      description: Get sales tracker config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSalesTrackerConfigResponse'
      summary: Get sales tracker config
      tags:
      - Config
    post:
      consumes:
      - application/json
      description: Create sales tracker config
      parameters:
      - description: Create sales tracker config request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateSalesTrackerConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create sales tracker config
      tags:
      - Config
  /configs/twitter:
    get:
      consumes:
      - application/json
      description: Get all twitter config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAllTwitterConfigResponse'
      summary: Get all twitter config
      tags:
      - Config
  /configs/twitter-sales:
    get:
      consumes:
      - application/json
      description: Get twitter sale config
      parameters:
      - description: marketplace name
        in: query
        name: marketplace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSaleTwitterConfigResponse'
      summary: Get twitter sale config
      tags:
      - ConfigTwitterSale
    post:
      consumes:
      - application/json
      description: Create twitter sale config
      parameters:
      - description: req
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateTwitterSaleConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateTwitterSaleConfigResponse'
      summary: Create twitter sale config
      tags:
      - ConfigTwitterSale
  /configs/upvote-tiers:
    get:
      consumes:
      - application/json
      description: Get all upvote tiers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUpvoteTiersConfig'
      summary: Get all upvote tiers
      tags:
      - Config
  /configs/whitelist-prune:
    delete:
      consumes:
      - application/json
      description: Delete prune exclude config
      parameters:
      - description: Upsert prune exlude request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertGuildPruneExcludeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete prune exclude config
      tags:
      - Config
    get:
      consumes:
      - application/json
      description: Get prune exclusion config
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildPruneExcludeResponse'
      summary: Get prune exclusion config
      tags:
      - Config
    post:
      consumes:
      - application/json
      description: Upsert prune exclude config
      parameters:
      - description: Upsert prune exlude request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertGuildPruneExcludeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Upsert prune exclude config
      tags:
      - Config
  /dao-voting/proposals:
    delete:
      consumes:
      - application/json
      description: Detele DAO proposal and then remove its discussion channel.
      parameters:
      - description: Proposal ID
        in: path
        name: proposal_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete DAO Proposal
      tags:
      - DAO Proposal
    get:
      consumes:
      - application/json
      description: Get dao proposals
      parameters:
      - description: Discord ID
        in: query
        name: user_discord_id
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAllDaoProposals'
      summary: Get dao proposals
      tags:
      - DAO-Voting
    post:
      consumes:
      - application/json
      description: Create dao proposal and then create a discussion channel for users
        to discuss about the proposal.
      parameters:
      - description: Create dao proposal request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateDaoProposalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateDaoProposalResponse'
      summary: Dao Proposal
      tags:
      - DAO Proposal
  /dao-voting/proposals/vote:
    post:
      consumes:
      - application/json
      description: Create dao vote
      parameters:
      - description: Create dao vote request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateDaoVoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create dao vote
      tags:
      - Dao-voting
  /dao-voting/proposals/votes/{vote_id}:
    put:
      consumes:
      - application/json
      description: Update dao vote
      parameters:
      - description: DAO Vote ID
        in: path
        name: vote_id
        required: true
        type: string
      - description: Update dao vote request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateDaoVoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UpdateVote'
      summary: Update dao vote
      tags:
      - Dao-voting
  /dao-voting/token-holder/status:
    get:
      consumes:
      - application/json
      description: Check token holder connect wallet yet? And have enough amount based
        on criteria (has 10 icy, 3 neko, havent connected walelt, …)
      parameters:
      - description: Discord ID
        in: query
        name: user-discord-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TokenHolderStatus'
      summary: Get status of token holder for creating proposal and voting
      tags:
      - DAO-Voting
  /dao-voting/user-votes:
    get:
      consumes:
      - application/json
      description: Get dao votes
      parameters:
      - description: Discord ID
        in: query
        name: user_discord_id
        required: true
        type: string
      - description: Proposal ID
        in: query
        name: proposal-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetAllDaoProposalVotes'
      summary: Get dao votes
      tags:
      - DAO-Voting
  /dao-voting/votes:
    get:
      consumes:
      - application/json
      description: Get dao proposal vote of user
      parameters:
      - description: Proposal ID
        in: query
        name: proposal_id
        required: true
        type: string
      - description: Discord ID
        in: query
        name: user_discord_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetVote'
      summary: Get dao proposal vote of user
      tags:
      - DAO-Voting
  /data/configs/activities/{activity}:
    post:
      consumes:
      - application/json
      description: Toggle activity config
      parameters:
      - description: Activity name
        in: path
        name: activity
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ToggleActivityConfigResponse'
      summary: Toggle activity config
      tags:
      - Data
  /data/metrics:
    get:
      consumes:
      - application/json
      description: API to get stats of collections, users, servers, ...
      parameters:
      - description: total_servers | active_users | nft_collections | verified_wallets
          | supported_tokens | command_usage
        in: query
        name: q
        required: true
        type: string
      - description: case active_users
        in: query
        name: guild_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DataMetric'
      summary: Metric
      tags:
      - Data
  /data/usage-stats/dao-tracker:
    get:
      consumes:
      - application/json
      description: Get dao tracker usage across Mochi
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DaoTrackerSpaceCountResponse'
      summary: Metric
      tags:
      - Data
  /data/usage-stats/proposal:
    get:
      consumes:
      - application/json
      description: Get proposal usage across Mochi
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GuildProposalUsageResponse'
      summary: Metric
      tags:
      - Data
  /defi/chains:
    get:
      consumes:
      - application/json
      description: List All Chain
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetListAllChainsResponse'
      summary: List All Chain
      tags:
      - Defi
  /defi/coins:
    get:
      consumes:
      - application/json
      description: Search coin
      parameters:
      - description: coin query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SearchCoinResponse'
      summary: Search coin
      tags:
      - Defi
  /defi/coins/{id}:
    get:
      consumes:
      - application/json
      description: Get coin
      parameters:
      - description: Coin ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCoinResponseWrapper'
      summary: Get coin
      tags:
      - Defi
  /defi/coins/binance/{symbol}:
    get:
      consumes:
      - application/json
      description: Get coin data from Binance Exchange
      parameters:
      - description: Coin ID
        in: path
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCoinResponseWrapper'
      summary: Get coin data from Binance Exchange
      tags:
      - Defi
  /defi/coins/compare:
    get:
      consumes:
      - application/json
      description: Compare token
      parameters:
      - description: base token
        in: query
        name: base
        required: true
        type: string
      - description: target token
        in: query
        name: target
        required: true
        type: string
      - description: compare interval
        in: query
        name: interval
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CompareTokenResponse'
      summary: Compare token
      tags:
      - Defi
  /defi/gas-tracker:
    get:
      consumes:
      - application/json
      description: Get gas tracker of all chain
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GasTrackerResponseData'
      summary: Get gas tracker of all chain
      tags:
      - Defi
  /defi/gas-tracker/{chain}:
    get:
      consumes:
      - application/json
      description: Get gas tracker of one chain
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ChainGasTrackerResponseData'
      summary: Get gas tracker of one chain
      tags:
      - Defi
  /defi/market-chart:
    get:
      consumes:
      - application/json
      description: Get historical market chart
      parameters:
      - description: Coin ID
        in: path
        name: coin_id
        required: true
        type: string
      - description: Day
        in: path
        name: day
        required: true
        type: integer
      - default: usd
        description: Currency
        in: path
        name: currency
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetHistoricalMarketChartResponse'
      summary: Get historical market chart
      tags:
      - Defi
  /defi/market-data:
    get:
      consumes:
      - application/json
      description: Get coins market data of top coins
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: page_size
        in: query
        name: page_size
        type: string
      - description: 'accepted values: price_change_percentage_7d_asc, price_change_percentage_7d_desc,
          price_change_percentage_1h_asc, price_change_percentage_1h_desc, price_change_percentage_24h_asc,
          price_change_percentage_24h_desc'
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCoinsMarketDataResponse'
      summary: Get coins market data of top coins
      tags:
      - Defi
  /defi/price-alert:
    delete:
      consumes:
      - application/json
      description: Remove from user's price alerts
      parameters:
      - in: query
        name: symbol
        required: true
        type: string
      - in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Remove from user's price alerts
      tags:
      - Defi
    get:
      consumes:
      - application/json
      description: Get user's price alerts
      parameters:
      - in: query
        name: page
        type: integer
      - in: query
        name: size
        type: integer
      - in: query
        name: user_discord_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListTokenPriceAlertResponse'
      summary: Get user's price alerts
      tags:
      - Defi
    post:
      consumes:
      - application/json
      description: Add to user's price alert
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.AddTokenPriceAlertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AddTokenPriceAlertResponse'
      summary: Add to user's price alert
      tags:
      - Defi
  /defi/token:
    get:
      consumes:
      - application/json
      description: Get supported tokens
      parameters:
      - description: token address
        in: query
        name: address
        required: true
        type: string
      - description: token chain
        in: query
        name: chain
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSupportedTokenResponse'
      summary: Get supported tokens
      tags:
      - Defi
  /defi/token-support:
    get:
      consumes:
      - application/json
      description: Get tokens requested by user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSupportedTokensResponse'
      summary: Get tokens requested by user
      tags:
      - Defi
    post:
      consumes:
      - application/json
      description: Request support token
      parameters:
      - description: Create user token support request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserTokenSupportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateUserTokenSupportRequest'
      summary: Request support token
      tags:
      - Defi
  /defi/token-support/{id}/approve:
    put:
      consumes:
      - application/json
      description: Approve support token request
      parameters:
      - description: Support Token Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateUserTokenSupportRequest'
      summary: Approve support token request
      tags:
      - Defi
  /defi/token-support/{id}/reject:
    put:
      consumes:
      - application/json
      description: Reject support token request
      parameters:
      - description: Support Token Request ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateUserTokenSupportRequest'
      summary: Reject support token request
      tags:
      - Defi
  /defi/tokens:
    get:
      consumes:
      - application/json
      description: Get supported tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSupportedTokensResponse'
      summary: Get supported tokens
      tags:
      - Defi
  /defi/trending:
    get:
      consumes:
      - application/json
      description: Get trending search of coins
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTrendingSearch'
      summary: Get trending search of coins
      tags:
      - Defi
  /defi/watchlist:
    delete:
      consumes:
      - application/json
      description: Remove from user's watchlist
      parameters:
      - in: query
        name: symbol
        required: true
        type: string
      - in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Remove from user's watchlist
      tags:
      - Defi
    get:
      consumes:
      - application/json
      description: Get user's watchlist
      parameters:
      - in: query
        name: coin_gecko_id
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: size
        type: integer
      - in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetWatchlistResponse'
      summary: Get user's watchlist
      tags:
      - Defi
    post:
      consumes:
      - application/json
      description: Add to user's watchlist
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.AddToWatchlistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.AddToWatchlistResponse'
      summary: Add to user's watchlist
      tags:
      - Defi
  /fiat/historical-exchange-rates:
    get:
      consumes:
      - application/json
      description: Remove from user's watchlist
      parameters:
      - in: query
        name: base
        required: true
        type: string
      - in: query
        maximum: 365
        minimum: 7
        name: days
        type: integer
      - in: query
        name: target
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetFiatHistoricalExchangeRatesResponse'
      summary: Get historical market chart
      tags:
      - Fiat
  /guilds:
    get:
      consumes:
      - application/json
      description: Get guilds
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildsResponse'
      summary: Get guilds
      tags:
      - Guild
    post:
      consumes:
      - application/json
      description: Create guild
      parameters:
      - description: Create Guild request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateGuildRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/request.CreateGuildRequest'
      summary: Create guild
      tags:
      - Guild
  /guilds/{guild_id}:
    get:
      consumes:
      - application/json
      description: Get guild
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildResponse'
      summary: Get guild
      tags:
      - Guild
    put:
      consumes:
      - application/json
      description: Update guild
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      - description: Update guild request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateGuildRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Update guild
      tags:
      - Guild
  /guilds/{guild_id}/channels:
    post:
      consumes:
      - application/json
      description: Create guild channel
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      - description: Guild ID
        in: query
        name: count_type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Create guild channel
      tags:
      - Guild
  /guilds/{guild_id}/custom-tokens:
    get:
      consumes:
      - application/json
      description: List all guild custom token
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListAllCustomTokenResponse'
      summary: List all guild custom token
      tags:
      - Guild
  /guilds/{guild_id}/roles:
    get:
      consumes:
      - application/json
      description: Update guild
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.DiscordGuildRole'
            type: array
      summary: Update guild
      tags:
      - Guild
  /guilds/{guild_id}/stats:
    get:
      consumes:
      - application/json
      description: Get guild stats
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DiscordGuildStat'
      summary: Get guild stats
      tags:
      - Guild
  /guilds/user-managed:
    get:
      consumes:
      - application/json
      description: Get my guild list
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListMyGuildsResponse'
      summary: Get my guilds list
      tags:
      - Guild
  /nfts:
    get:
      consumes:
      - application/json
      description: List all nft collections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ListAllNFTCollectionsResponse'
      summary: List all nft collections
      tags:
      - NFT
  /nfts/{symbol}/{id}:
    get:
      consumes:
      - application/json
      description: Get NFT Detail
      parameters:
      - description: Symbol
        in: path
        name: symbol
        required: true
        type: string
      - description: Token ID
        in: path
        name: id
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        type: string
      - description: Query by using Collection Address
        in: query
        name: query_address
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.IndexerGetNFTTokenDetailResponseWithSuggestions'
      summary: Get NFT Detail
      tags:
      - NFT
  /nfts/{symbol}/{id}/activity:
    get:
      consumes:
      - application/json
      description: Get NFT Activity
      parameters:
      - description: Collection address | Symbol
        in: path
        name: symbol
        required: true
        type: string
      - description: Token ID
        in: path
        name: id
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetNFTActivityResponse'
      summary: Get NFT Activity
      tags:
      - NFT
  /nfts/collections:
    get:
      consumes:
      - application/json
      description: Get NFT trading volume
      parameters:
      - default: 0
        description: Page
        in: query
        name: page
        type: integer
      - default: 10
        description: Size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NFTCollectionsResponse'
      summary: Get NFT trading volume
      tags:
      - NFT
    post:
      consumes:
      - application/json
      description: Create NFT Collection
      parameters:
      - description: Create nft collection request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateNFTCollectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateNFTCollectionResponse'
      summary: Create NFT Collection
      tags:
      - NFT
  /nfts/collections/{address}:
    patch:
      consumes:
      - application/json
      description: Update NFT Collection
      parameters:
      - description: Collection Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Update NFT Collection
      tags:
      - NFT
  /nfts/collections/{symbol}:
    get:
      consumes:
      - application/json
      description: Get NFT Tokens
      parameters:
      - description: Symbol
        in: path
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.IndexerGetNFTTokensResponse'
      summary: Get NFT Tokens
      tags:
      - NFT
  /nfts/collections/{symbol}/detail:
    get:
      consumes:
      - application/json
      description: Get detail nft collection
      parameters:
      - description: Symbol
        in: path
        name: symbol
        required: true
        type: string
      - description: Query by collection address
        in: query
        name: query_address
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetDetailNftCollectionResponse'
      summary: Get detail nft collection
      tags:
      - NFT
  /nfts/collections/address/{address}:
    get:
      consumes:
      - application/json
      description: Get NFT collection by address chain
      parameters:
      - description: Collection Address
        in: path
        name: address
        required: true
        type: string
      - description: Chain
        in: query
        name: chain
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetNFTCollectionByAddressChainResponse'
      summary: Get NFT collection by address chain
      tags:
      - NFT
  /nfts/collections/stats:
    get:
      consumes:
      - application/json
      description: Get collection count
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetCollectionCountResponse'
      summary: Get collection count
      tags:
      - NFT
  /nfts/collections/suggestion:
    get:
      consumes:
      - application/json
      description: Get guild suggest nft collections
      parameters:
      - description: symbol collection query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSuggestionNFTCollectionsResponse'
      summary: Get guild suggest nft collections
      tags:
      - NFT
  /nfts/collections/tickers:
    get:
      consumes:
      - application/json
      description: Get NFT collection tickers
      parameters:
      - description: CollectionAddress
        in: query
        name: collection_address
        required: true
        type: string
      - description: from
        in: query
        name: from
        required: true
        type: string
      - description: to
        in: query
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.IndexerNFTCollectionTickersResponse'
      summary: Get NFT collection tickers
      tags:
      - NFT
  /nfts/default-nft-ticker:
    get:
      consumes:
      - application/json
      description: Get guild default nft ticker
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      - description: Guild ticker query
        in: query
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetGuildDefaultNftTickerResponse'
      summary: Get guild default nft ticker
      tags:
      - NFT
    post:
      consumes:
      - application/json
      description: Set guild default nft ticker
      parameters:
      - description: Set guild default ticker request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GuildConfigDefaultNftTickerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseDataMessage'
      summary: Set guild default nft ticker
      tags:
      - NFT
  /nfts/icons:
    get:
      consumes:
      - application/json
      description: Get NFT metadata attribute icon
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NftMetadataAttrIconResponse'
      summary: Get NFT metadata attribute icon
      tags:
      - NFT
  /nfts/new-listed:
    get:
      consumes:
      - application/json
      description: Get new listed nft collection
      parameters:
      - default: 0
        description: Page
        in: query
        name: page
        type: integer
      - default: 10
        description: Size
        in: query
        name: size
        type: integer
      - default: 7
        description: Interval
        in: query
        name: interval
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NFTNewListedResponse'
      summary: Get new listed nft collection
      tags:
      - NFT
  /nfts/sales:
    get:
      consumes:
      - application/json
      description: Get NFT sales
      parameters:
      - description: Collection address
        in: query
        name: collection-address
        required: true
        type: string
      - description: Platform
        in: query
        name: platform
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NftSalesResponse'
      summary: Get NFT sales
      tags:
      - NFT
  /nfts/soulbound:
    get:
      consumes:
      - application/json
      description: Get Nft Soulbound
      parameters:
      - description: collection address
        in: query
        name: collection_address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSoulBoundNFTResponse'
      summary: Get Nft Soulbound
      tags:
      - NFT
  /nfts/supported-chains:
    post:
      consumes:
      - application/json
      description: Get supported chains
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetSupportedChains'
      summary: Get supported chains
      tags:
      - NFT
  /nfts/tickers:
    get:
      consumes:
      - application/json
      description: Get NFT token tickers
      parameters:
      - description: CollectionAddress
        in: query
        name: collection_address
        required: true
        type: string
      - description: Token ID
        in: query
        name: token_id
        required: true
        type: string
      - description: from
        in: query
        name: from
        required: true
        type: string
      - description: to
        in: query
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.IndexerGetNFTTokenTickersResponse'
      summary: Get NFT token tickers
      tags:
      - NFT
  /nfts/trades:
    post:
      consumes:
      - application/json
      description: Create Trade Offer
      parameters:
      - description: Create Trade Offer Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateTradeOfferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateTradeOfferResponse'
      summary: Create Trade Offer
      tags:
      - NFT
  /nfts/trades/{id}:
    get:
      consumes:
      - application/json
      description: Get Trade Offer
      parameters:
      - description: Trade Offer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTradeOfferResponse'
      summary: Get Trade Offer
      tags:
      - NFT
  /nfts/trading-volume:
    get:
      consumes:
      - application/json
      description: Get NFT trading volume
      parameters:
      - description: Symbol
        in: path
        name: symbol
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NFTTradingVolumeResponse'
      summary: Get NFT trading volume
      tags:
      - NFT
  /nfts/watchlist:
    delete:
      consumes:
      - application/json
      description: Remove from user's nft watchlist
      parameters:
      - description: symbol
        in: query
        name: symbol
        required: true
        type: string
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: Remove from user's nft watchlist
      tags:
      - NFT
    get:
      consumes:
      - application/json
      description: Get user's nft watchlist
      parameters:
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      - description: page
        in: query
        name: page
        required: true
        type: string
      - description: size
        in: query
        name: size
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetNftWatchlistResponse'
      summary: Get user's nft watchlist
      tags:
      - NFT
    post:
      consumes:
      - application/json
      description: Add to user's nft watchlist
      parameters:
      - description: request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.AddNftWatchlistRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NftWatchlistSuggestResponse'
      summary: Add to user's nft watchlist
      tags:
      - NFT
  /swap:
    post:
      consumes:
      - application/json
      description: Execute swap token
      parameters:
      - description: swap request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SwapRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Execute swap token
      tags:
      - Swap
  /swap/route:
    get:
      consumes:
      - application/json
      description: Get swap route for token pairs
      parameters:
      - description: from token symbol
        in: query
        name: from
        required: true
        type: string
      - description: to token symbol
        in: query
        name: to
        required: true
        type: string
      - description: from amount value
        in: query
        name: amount
        required: true
        type: string
      - description: chain name
        in: query
        name: chain_name
        type: string
      - description: chain id
        in: query
        name: chain_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SwapRouteResponseData'
      summary: Get swap route for token pairs
      tags:
      - Swap
  /tip/onchain/{user_id}/balances:
    get:
      consumes:
      - application/json
      description: Onchain Tip Bot - Get user's onchain balances
      parameters:
      - description: userId
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserBalancesResponse'
      summary: Onchain Tip Bot - Get user's onchain balances
      tags:
      - Tip
  /tip/onchain/{user_id}/transfers:
    get:
      consumes:
      - application/json
      description: Onchain Tip Bot - Get user's onchain transfers
      parameters:
      - description: userId
        in: query
        name: user_id
        type: string
      - description: status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetOnchainTransfersResponse'
      summary: Onchain Tip Bot - Get user's onchain transfers
      tags:
      - Tip
  /tip/onchain/claim:
    post:
      consumes:
      - application/json
      description: Onchain Tip Bot - Submit transfer transaction
      parameters:
      - description: req
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.ClaimOnchainTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ClaimOnchainTransferResponse'
      summary: Onchain Tip Bot - Submit transfer transaction
      tags:
      - Tip
  /tip/onchain/submit:
    post:
      consumes:
      - application/json
      description: Onchain Tip Bot - Submit transfer transaction
      parameters:
      - description: req
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SubmitOnchainTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SubmitOnchainTransferResponse'
      summary: Onchain Tip Bot - Submit transfer transaction
      tags:
      - Tip
  /tip/transactions:
    get:
      consumes:
      - application/json
      description: Get transactions by query
      parameters:
      - description: sender ID
        in: query
        name: sender_id
        type: string
      - description: receiver ID
        in: query
        name: receiver_id
        type: string
      - description: token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TransactionsResponse'
      summary: Get transactions by query
      tags:
      - Tip
  /tip/transfer:
    post:
      consumes:
      - application/json
      description: API transfer token for tip, airdrop, ...
      parameters:
      - description: Transfer token request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.OffchainTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OffchainTipBotTransferTokenResponse'
      summary: OffChain Tip Bot - Transfer token
      tags:
      - Tip
  /users:
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: Create user request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Create User
      tags:
      - User
  /users/:id/envelop-streak:
    get:
      consumes:
      - application/json
      description: Get user envelop streak
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserEnvelopStreak'
      summary: Get user envelop streak
      tags:
      - User
  /users/:id/wallets:
    get:
      consumes:
      - application/json
      description: Get user's wallets
      parameters:
      - description: guild ID
        in: query
        name: guild_id
        required: true
        type: string
      - description: req
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.GetTrackingWalletsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTrackingWalletsResponse'
      summary: Get user's wallets
      tags:
      - Wallet
    post:
      consumes:
      - application/json
      description: Untrack a wallet
      parameters:
      - description: user ID
        in: path
        name: id
        required: true
        type: string
      - in: query
        name: address
        type: string
      - in: query
        name: alias
        type: string
      - in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Untrack a wallet
      tags:
      - Wallet
  /users/:id/wallets/:query:
    get:
      consumes:
      - application/json
      description: Find one user's trackng wallet
      parameters:
      - description: user Id
        in: path
        name: id
        required: true
        type: string
      - description: alias or address query
        in: path
        name: query
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetOneWalletResponse'
      summary: Find one user's trackng wallet
      tags:
      - Wallet
  /users/:id/wallets/tracking:
    get:
      consumes:
      - application/json
      description: Get user's tracking wallets
      parameters:
      - description: req
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.GetTrackingWalletsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetTrackingWalletsResponse'
      summary: Get user's tracking wallets
      tags:
      - Wallet
  /users/{id}/transactions:
    get:
      consumes:
      - application/json
      description: Get user transaction
      parameters:
      - description: user discord ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserTransactionResponse'
      summary: Get user transaction
      tags:
      - User
  /users/{user_id}:
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserResponse'
      summary: Get user
      tags:
      - User
  /users/envelop:
    post:
      consumes:
      - application/json
      description: Track user receive envelop
      parameters:
      - description: Create envelop request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.CreateEnvelop'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CreateEnvelop'
      summary: Track user receive envelop
      tags:
      - User
  /users/gmstreak:
    get:
      consumes:
      - application/json
      description: Get user current GM streak
      parameters:
      - description: Discord ID
        in: query
        name: discord_id
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserCurrentGMStreakResponse'
      summary: Get user current GM streak
      tags:
      - User
  /users/me:
    get:
      consumes:
      - application/json
      description: Get user info
      parameters:
      - description: Authorization
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetMyInfoResponse'
      summary: Get user info
      tags:
      - User
  /users/profiles/:
    get:
      consumes:
      - application/json
      description: Get user profile
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetDataUserProfileResponse'
      summary: Get user profile
      tags:
      - User
  /users/top:
    get:
      consumes:
      - application/json
      description: Get top users
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      - description: User ID
        in: query
        name: user_id
        required: true
        type: string
      - default: 0
        description: Page
        in: query
        name: page
        type: integer
      - default: 10
        description: Limit
        in: query
        name: limit
        type: integer
      - description: Query to search by name
        in: query
        name: query
        type: string
      - description: ASC / DESC
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.TopUser'
      summary: Get top users
      tags:
      - User
  /users/upvote-leaderboard:
    get:
      consumes:
      - application/json
      description: Get user upvote leaderboard
      parameters:
      - description: streak / total
        in: query
        name: by
        required: true
        type: string
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserUpvoteLeaderboardResponse'
      summary: Get user upvote leaderboard
      tags:
      - User
  /users/upvote-streak:
    get:
      consumes:
      - application/json
      description: Get user current upvote streak
      parameters:
      - description: Discord ID
        in: query
        name: discord_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.CurrentUserUpvoteStreakResponse'
      summary: Get user current upvote streak
      tags:
      - User
  /users/wallets/{address}:
    get:
      consumes:
      - application/json
      description: Get user by guild_id address
      parameters:
      - description: Address
        in: path
        name: address
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GetUserWalletByGuildIDAddressResponse'
      summary: Get user by guild_id address
      tags:
      - User
  /users/xp:
    post:
      consumes:
      - application/json
      description: Send User XP
      parameters:
      - description: Send user XP request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.SendUserXPRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Send User XP
      tags:
      - User
  /verify:
    post:
      consumes:
      - application/json
      description: Verify wallet address
      parameters:
      - description: Verify wallet address request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.VerifyWalletAddressRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseStatus'
      summary: Verify wallet address
      tags:
      - Verification
  /verify/assign-role:
    post:
      consumes:
      - application/json
      description: Assign verified role if user has verified wallet address
      parameters:
      - description: Assign verified role request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.AssignVerifiedRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseStatus'
      summary: Assign verified role if user has verified wallet address
      tags:
      - Verification
  /verify/config:
    delete:
      consumes:
      - application/json
      description: Delete guild config wallet verification message
      parameters:
      - description: Guild ID
        in: query
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseStatus'
      summary: Delete guild config wallet verification message
      tags:
      - Verification
    post:
      consumes:
      - application/json
      description: Config wallet verification message
      parameters:
      - description: New guild config wallet verification message request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.NewGuildConfigWalletVerificationMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewGuildConfigWalletVerificationMessageResponse'
      summary: Config wallet verification message
      tags:
      - Verification
    put:
      consumes:
      - application/json
      description: Update guild config wallet verification message
      parameters:
      - description: Update guild config wallet verification message request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.NewGuildConfigWalletVerificationMessageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewGuildConfigWalletVerificationMessageResponse'
      summary: Update guild config wallet verification message
      tags:
      - Verification
  /verify/config/{guild_id}:
    get:
      consumes:
      - application/json
      description: Get guild config wallet verification message
      parameters:
      - description: Guild ID
        in: path
        name: guild_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.NewGuildConfigWalletVerificationMessageResponse'
      summary: Get guild config wallet verification message
      tags:
      - Verification
  /verify/generate:
    post:
      consumes:
      - application/json
      description: Generate verification
      parameters:
      - description: Generate verification request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.GenerateVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GenerateVerificationResponse'
      summary: Generate verification
      tags:
      - Verification
  /widget/device:
    delete:
      consumes:
      - application/json
      description: Delete user current device data
      parameters:
      - description: Delete user device
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteUserDeviceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete user current device data
      tags:
      - Widget
    get:
      consumes:
      - application/json
      description: Get user current device data
      parameters:
      - description: Device ID
        in: query
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserDeviceResponse'
      summary: Get user current device data
      tags:
      - Widget
    post:
      consumes:
      - application/json
      description: Upsert user current device data
      parameters:
      - description: Upsert user device
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertUserDeviceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Upsert user current device data
      tags:
      - Widget
  /widget/token-alert:
    delete:
      consumes:
      - application/json
      description: Delete user token alerts
      parameters:
      - description: Delete user token alert
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.DeleteDiscordUserAlertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Delete user token alerts
      tags:
      - Widget
    get:
      consumes:
      - application/json
      description: Get user current token alerts
      parameters:
      - description: Discord ID
        in: query
        name: discord_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.DiscordUserTokenAlertResponse'
      summary: Get user current token alerts
      tags:
      - Widget
    post:
      consumes:
      - application/json
      description: Upsert user token alerts
      parameters:
      - description: Upsert user token alert
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/request.UpsertDiscordUserAlertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResponseMessage'
      summary: Upsert user token alerts
      tags:
      - Widget
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: access_token
    type: apiKey
swagger: "2.0"
