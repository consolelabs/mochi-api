// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/service/processor/service.go

// Package mock_processor is a generated GoMock package.
package mock_processor

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	request "github.com/defipod/mochi/pkg/request"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateUserTransaction mocks base method.
func (m *MockService) CreateUserTransaction(createUserTransactionRequest model.CreateUserTransaction) (*model.CreateUserTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTransaction", createUserTransactionRequest)
	ret0, _ := ret[0].(*model.CreateUserTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTransaction indicates an expected call of CreateUserTransaction.
func (mr *MockServiceMockRecorder) CreateUserTransaction(createUserTransactionRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTransaction", reflect.TypeOf((*MockService)(nil).CreateUserTransaction), createUserTransactionRequest)
}

// GetUserFactionXp mocks base method.
func (m *MockService) GetUserFactionXp(userDiscordId string) (*model.GetUserFactionXpsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFactionXp", userDiscordId)
	ret0, _ := ret[0].(*model.GetUserFactionXpsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFactionXp indicates an expected call of GetUserFactionXp.
func (mr *MockServiceMockRecorder) GetUserFactionXp(userDiscordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFactionXp", reflect.TypeOf((*MockService)(nil).GetUserFactionXp), userDiscordId)
}

// HandleUserUpvote mocks base method.
func (m *MockService) HandleUserUpvote(req *request.UserUpvoteProcessorRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserUpvote", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserUpvote indicates an expected call of HandleUserUpvote.
func (mr *MockServiceMockRecorder) HandleUserUpvote(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserUpvote", reflect.TypeOf((*MockService)(nil).HandleUserUpvote), req)
}
