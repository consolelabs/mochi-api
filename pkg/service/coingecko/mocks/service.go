// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/service/coingecko/service.go

// Package mock_coingecko is a generated GoMock package.
package mock_coingecko

import (
	reflect "reflect"

	request "github.com/defipod/mochi/pkg/request"
	response "github.com/defipod/mochi/pkg/response"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetAssetPlatform mocks base method.
func (m *MockService) GetAssetPlatform(chainId int) (*response.AssetPlatformResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetPlatform", chainId)
	ret0, _ := ret[0].(*response.AssetPlatformResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetPlatform indicates an expected call of GetAssetPlatform.
func (mr *MockServiceMockRecorder) GetAssetPlatform(chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetPlatform", reflect.TypeOf((*MockService)(nil).GetAssetPlatform), chainId)
}

// GetCoin mocks base method.
func (m *MockService) GetCoin(coinID string) (*response.GetCoinResponse, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoin", coinID)
	ret0, _ := ret[0].(*response.GetCoinResponse)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetCoin indicates an expected call of GetCoin.
func (mr *MockServiceMockRecorder) GetCoin(coinID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoin", reflect.TypeOf((*MockService)(nil).GetCoin), coinID)
}

// GetCoinBRC20 mocks base method.
func (m *MockService) GetCoinBRC20(coinName string) (*response.GetCoinResponse, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinBRC20", coinName)
	ret0, _ := ret[0].(*response.GetCoinResponse)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetCoinBRC20 indicates an expected call of GetCoinBRC20.
func (mr *MockServiceMockRecorder) GetCoinBRC20(coinName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinBRC20", reflect.TypeOf((*MockService)(nil).GetCoinBRC20), coinName)
}

// GetCoinByContract mocks base method.
func (m *MockService) GetCoinByContract(platformId, contractAddress string) (*response.GetCoinByContractResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinByContract", platformId, contractAddress)
	ret0, _ := ret[0].(*response.GetCoinByContractResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinByContract indicates an expected call of GetCoinByContract.
func (mr *MockServiceMockRecorder) GetCoinByContract(platformId, contractAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinByContract", reflect.TypeOf((*MockService)(nil).GetCoinByContract), platformId, contractAddress)
}

// GetCoinPrice mocks base method.
func (m *MockService) GetCoinPrice(coinIDs []string, currency string) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinPrice", coinIDs, currency)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinPrice indicates an expected call of GetCoinPrice.
func (mr *MockServiceMockRecorder) GetCoinPrice(coinIDs, currency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinPrice", reflect.TypeOf((*MockService)(nil).GetCoinPrice), coinIDs, currency)
}

// GetCoinsMarketData mocks base method.
func (m *MockService) GetCoinsMarketData(ids []string, sparkline bool, page, pageSize string) ([]response.CoinMarketItemData, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinsMarketData", ids, sparkline, page, pageSize)
	ret0, _ := ret[0].([]response.CoinMarketItemData)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetCoinsMarketData indicates an expected call of GetCoinsMarketData.
func (mr *MockServiceMockRecorder) GetCoinsMarketData(ids, sparkline, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinsMarketData", reflect.TypeOf((*MockService)(nil).GetCoinsMarketData), ids, sparkline, page, pageSize)
}

// GetHistoricalGlobalMarketChart mocks base method.
func (m *MockService) GetHistoricalGlobalMarketChart(days int) (*response.GetHistoricalGlobalMarketResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalGlobalMarketChart", days)
	ret0, _ := ret[0].(*response.GetHistoricalGlobalMarketResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoricalGlobalMarketChart indicates an expected call of GetHistoricalGlobalMarketChart.
func (mr *MockServiceMockRecorder) GetHistoricalGlobalMarketChart(days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalGlobalMarketChart", reflect.TypeOf((*MockService)(nil).GetHistoricalGlobalMarketChart), days)
}

// GetHistoricalMarketData mocks base method.
func (m *MockService) GetHistoricalMarketData(coinID, currency string, days int) (*response.HistoricalMarketChartResponse, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoricalMarketData", coinID, currency, days)
	ret0, _ := ret[0].(*response.HistoricalMarketChartResponse)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetHistoricalMarketData indicates an expected call of GetHistoricalMarketData.
func (mr *MockServiceMockRecorder) GetHistoricalMarketData(coinID, currency, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoricalMarketData", reflect.TypeOf((*MockService)(nil).GetHistoricalMarketData), coinID, currency, days)
}

// GetHistoryCoinInfo mocks base method.
func (m *MockService) GetHistoryCoinInfo(sourceSymbol, interval string) ([][]float64, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryCoinInfo", sourceSymbol, interval)
	ret0, _ := ret[0].([][]float64)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetHistoryCoinInfo indicates an expected call of GetHistoryCoinInfo.
func (mr *MockServiceMockRecorder) GetHistoryCoinInfo(sourceSymbol, interval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryCoinInfo", reflect.TypeOf((*MockService)(nil).GetHistoryCoinInfo), sourceSymbol, interval)
}

// GetSupportedCoins mocks base method.
func (m *MockService) GetSupportedCoins() ([]response.CoingeckoSupportedTokenResponse, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedCoins")
	ret0, _ := ret[0].([]response.CoingeckoSupportedTokenResponse)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// GetSupportedCoins indicates an expected call of GetSupportedCoins.
func (mr *MockServiceMockRecorder) GetSupportedCoins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedCoins", reflect.TypeOf((*MockService)(nil).GetSupportedCoins))
}

// GetTopLoserGainer mocks base method.
func (m *MockService) GetTopLoserGainer(req request.TopGainerLoserRequest) (*response.GetTopGainerLoser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopLoserGainer", req)
	ret0, _ := ret[0].(*response.GetTopGainerLoser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopLoserGainer indicates an expected call of GetTopLoserGainer.
func (mr *MockServiceMockRecorder) GetTopLoserGainer(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopLoserGainer", reflect.TypeOf((*MockService)(nil).GetTopLoserGainer), req)
}

// GetTrendingSearch mocks base method.
func (m *MockService) GetTrendingSearch() (*response.GetTrendingSearch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrendingSearch")
	ret0, _ := ret[0].(*response.GetTrendingSearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrendingSearch indicates an expected call of GetTrendingSearch.
func (mr *MockServiceMockRecorder) GetTrendingSearch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrendingSearch", reflect.TypeOf((*MockService)(nil).GetTrendingSearch))
}
