// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/service/discord/service.go

// Package mock_discord is a generated GoMock package.
package mock_discord

import (
	reflect "reflect"

	discordgo "github.com/bwmarrin/discordgo"
	model "github.com/defipod/mochi/pkg/model"
	request "github.com/defipod/mochi/pkg/request"
	response "github.com/defipod/mochi/pkg/response"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Channel mocks base method.
func (m *MockService) Channel(channelID string) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Channel", channelID)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Channel indicates an expected call of Channel.
func (mr *MockServiceMockRecorder) Channel(channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Channel", reflect.TypeOf((*MockService)(nil).Channel), channelID)
}

// CreateChannel mocks base method.
func (m *MockService) CreateChannel(guildID string, createData discordgo.GuildChannelCreateData) (*discordgo.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", guildID, createData)
	ret0, _ := ret[0].(*discordgo.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockServiceMockRecorder) CreateChannel(guildID, createData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockService)(nil).CreateChannel), guildID, createData)
}

// CreateDiscussionChannelForProposal mocks base method.
func (m *MockService) CreateDiscussionChannelForProposal(guildId, proposalChannelID, proposalTitle string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDiscussionChannelForProposal", guildId, proposalChannelID, proposalTitle)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDiscussionChannelForProposal indicates an expected call of CreateDiscussionChannelForProposal.
func (mr *MockServiceMockRecorder) CreateDiscussionChannelForProposal(guildId, proposalChannelID, proposalTitle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDiscussionChannelForProposal", reflect.TypeOf((*MockService)(nil).CreateDiscussionChannelForProposal), guildId, proposalChannelID, proposalTitle)
}

// DeleteChannel mocks base method.
func (m *MockService) DeleteChannel(channelId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", channelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockServiceMockRecorder) DeleteChannel(channelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockService)(nil).DeleteChannel), channelId)
}

// GetGuild mocks base method.
func (m *MockService) GetGuild(guildID string) (*discordgo.Guild, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuild", guildID)
	ret0, _ := ret[0].(*discordgo.Guild)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuild indicates an expected call of GetGuild.
func (mr *MockServiceMockRecorder) GetGuild(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuild", reflect.TypeOf((*MockService)(nil).GetGuild), guildID)
}

// GetGuildMembers mocks base method.
func (m *MockService) GetGuildMembers(guildID string) ([]*discordgo.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuildMembers", guildID)
	ret0, _ := ret[0].([]*discordgo.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuildMembers indicates an expected call of GetGuildMembers.
func (mr *MockServiceMockRecorder) GetGuildMembers(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuildMembers", reflect.TypeOf((*MockService)(nil).GetGuildMembers), guildID)
}

// GetGuildRoles mocks base method.
func (m *MockService) GetGuildRoles(guildID string) ([]*model.DiscordGuildRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGuildRoles", guildID)
	ret0, _ := ret[0].([]*model.DiscordGuildRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGuildRoles indicates an expected call of GetGuildRoles.
func (mr *MockServiceMockRecorder) GetGuildRoles(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGuildRoles", reflect.TypeOf((*MockService)(nil).GetGuildRoles), guildID)
}

// GetUser mocks base method.
func (m *MockService) GetUser(userID string) (*discordgo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(*discordgo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockServiceMockRecorder) GetUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockService)(nil).GetUser), userID)
}

// NotifyAddNewCollection mocks base method.
func (m *MockService) NotifyAddNewCollection(guildID, collectionName, symbol, chain, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAddNewCollection", guildID, collectionName, symbol, chain, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyAddNewCollection indicates an expected call of NotifyAddNewCollection.
func (mr *MockServiceMockRecorder) NotifyAddNewCollection(guildID, collectionName, symbol, chain, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAddNewCollection", reflect.TypeOf((*MockService)(nil).NotifyAddNewCollection), guildID, collectionName, symbol, chain, image)
}

// NotifyCompleteCollectionIntegration mocks base method.
func (m *MockService) NotifyCompleteCollectionIntegration(guildID, collectionName, symbol, chain, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCompleteCollectionIntegration", guildID, collectionName, symbol, chain, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyCompleteCollectionIntegration indicates an expected call of NotifyCompleteCollectionIntegration.
func (mr *MockServiceMockRecorder) NotifyCompleteCollectionIntegration(guildID, collectionName, symbol, chain, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCompleteCollectionIntegration", reflect.TypeOf((*MockService)(nil).NotifyCompleteCollectionIntegration), guildID, collectionName, symbol, chain, image)
}

// NotifyCompleteCollectionSync mocks base method.
func (m *MockService) NotifyCompleteCollectionSync(guildID, collectionName, symbol, chain, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyCompleteCollectionSync", guildID, collectionName, symbol, chain, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyCompleteCollectionSync indicates an expected call of NotifyCompleteCollectionSync.
func (mr *MockServiceMockRecorder) NotifyCompleteCollectionSync(guildID, collectionName, symbol, chain, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyCompleteCollectionSync", reflect.TypeOf((*MockService)(nil).NotifyCompleteCollectionSync), guildID, collectionName, symbol, chain, image)
}

// NotifyGmStreak mocks base method.
func (m *MockService) NotifyGmStreak(channelID, userDiscordID string, streakCount int, podTownXps model.CreateUserTxResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyGmStreak", channelID, userDiscordID, streakCount, podTownXps)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyGmStreak indicates an expected call of NotifyGmStreak.
func (mr *MockServiceMockRecorder) NotifyGmStreak(channelID, userDiscordID, streakCount, podTownXps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyGmStreak", reflect.TypeOf((*MockService)(nil).NotifyGmStreak), channelID, userDiscordID, streakCount, podTownXps)
}

// NotifyGuildDelete mocks base method.
func (m *MockService) NotifyGuildDelete(guildID, guildName, iconURL string, guildsLeft int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyGuildDelete", guildID, guildName, iconURL, guildsLeft)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyGuildDelete indicates an expected call of NotifyGuildDelete.
func (mr *MockServiceMockRecorder) NotifyGuildDelete(guildID, guildName, iconURL, guildsLeft interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyGuildDelete", reflect.TypeOf((*MockService)(nil).NotifyGuildDelete), guildID, guildName, iconURL, guildsLeft)
}

// NotifyMemberJoin mocks base method.
func (m *MockService) NotifyMemberJoin(discordID, avatar, jlChannelID string, userCount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMemberJoin", discordID, avatar, jlChannelID, userCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMemberJoin indicates an expected call of NotifyMemberJoin.
func (mr *MockServiceMockRecorder) NotifyMemberJoin(discordID, avatar, jlChannelID, userCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMemberJoin", reflect.TypeOf((*MockService)(nil).NotifyMemberJoin), discordID, avatar, jlChannelID, userCount)
}

// NotifyMemberLeave mocks base method.
func (m *MockService) NotifyMemberLeave(req *request.MemberRemoveWebhookRequest, jlChannelId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyMemberLeave", req, jlChannelId)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyMemberLeave indicates an expected call of NotifyMemberLeave.
func (mr *MockServiceMockRecorder) NotifyMemberLeave(req, jlChannelId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyMemberLeave", reflect.TypeOf((*MockService)(nil).NotifyMemberLeave), req, jlChannelId)
}

// NotifyNewCommonwealthDiscussion mocks base method.
func (m *MockService) NotifyNewCommonwealthDiscussion(req request.NewCommonwealthDiscussionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyNewCommonwealthDiscussion", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyNewCommonwealthDiscussion indicates an expected call of NotifyNewCommonwealthDiscussion.
func (mr *MockServiceMockRecorder) NotifyNewCommonwealthDiscussion(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNewCommonwealthDiscussion", reflect.TypeOf((*MockService)(nil).NotifyNewCommonwealthDiscussion), req)
}

// NotifyNewGuild mocks base method.
func (m *MockService) NotifyNewGuild(newGuildID string, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyNewGuild", newGuildID, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyNewGuild indicates an expected call of NotifyNewGuild.
func (mr *MockServiceMockRecorder) NotifyNewGuild(newGuildID, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNewGuild", reflect.TypeOf((*MockService)(nil).NotifyNewGuild), newGuildID, count)
}

// NotifyNewProposal mocks base method.
func (m *MockService) NotifyNewProposal(channelID string, proposal response.SnapshotProposalDataResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyNewProposal", channelID, proposal)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyNewProposal indicates an expected call of NotifyNewProposal.
func (mr *MockServiceMockRecorder) NotifyNewProposal(channelID, proposal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyNewProposal", reflect.TypeOf((*MockService)(nil).NotifyNewProposal), channelID, proposal)
}

// NotifyStealAveragePrice mocks base method.
func (m *MockService) NotifyStealAveragePrice(price, floor float64, url, name, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyStealAveragePrice", price, floor, url, name, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyStealAveragePrice indicates an expected call of NotifyStealAveragePrice.
func (mr *MockServiceMockRecorder) NotifyStealAveragePrice(price, floor, url, name, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyStealAveragePrice", reflect.TypeOf((*MockService)(nil).NotifyStealAveragePrice), price, floor, url, name, image)
}

// NotifyStealFloorPrice mocks base method.
func (m *MockService) NotifyStealFloorPrice(price, floor float64, url, name, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyStealFloorPrice", price, floor, url, name, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyStealFloorPrice indicates an expected call of NotifyStealFloorPrice.
func (mr *MockServiceMockRecorder) NotifyStealFloorPrice(price, floor, url, name, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyStealFloorPrice", reflect.TypeOf((*MockService)(nil).NotifyStealFloorPrice), price, floor, url, name, image)
}

// ReplyUpvoteMessage mocks base method.
func (m *MockService) ReplyUpvoteMessage(msg *response.SetUpvoteMessageCacheResponse, source string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyUpvoteMessage", msg, source)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyUpvoteMessage indicates an expected call of ReplyUpvoteMessage.
func (mr *MockServiceMockRecorder) ReplyUpvoteMessage(msg, source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyUpvoteMessage", reflect.TypeOf((*MockService)(nil).ReplyUpvoteMessage), msg, source)
}

// SendDM mocks base method.
func (m *MockService) SendDM(userID string, payload discordgo.MessageSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDM", userID, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDM indicates an expected call of SendDM.
func (mr *MockServiceMockRecorder) SendDM(userID, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDM", reflect.TypeOf((*MockService)(nil).SendDM), userID, payload)
}

// SendDMUserPriceAlert mocks base method.
func (m *MockService) SendDMUserPriceAlert(userID, symbol string, alertType model.AlertType, price float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDMUserPriceAlert", userID, symbol, alertType, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDMUserPriceAlert indicates an expected call of SendDMUserPriceAlert.
func (mr *MockServiceMockRecorder) SendDMUserPriceAlert(userID, symbol, alertType, price interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDMUserPriceAlert", reflect.TypeOf((*MockService)(nil).SendDMUserPriceAlert), userID, symbol, alertType, price)
}

// SendFeedback mocks base method.
func (m *MockService) SendFeedback(req *request.UserFeedbackRequest, feedbackID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFeedback", req, feedbackID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFeedback indicates an expected call of SendFeedback.
func (mr *MockServiceMockRecorder) SendFeedback(req, feedbackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFeedback", reflect.TypeOf((*MockService)(nil).SendFeedback), req, feedbackID)
}

// SendGuildActivityLogs mocks base method.
func (m *MockService) SendGuildActivityLogs(channelID, userID, title, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendGuildActivityLogs", channelID, userID, title, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendGuildActivityLogs indicates an expected call of SendGuildActivityLogs.
func (mr *MockServiceMockRecorder) SendGuildActivityLogs(channelID, userID, title, description interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendGuildActivityLogs", reflect.TypeOf((*MockService)(nil).SendGuildActivityLogs), channelID, userID, title, description)
}

// SendLevelUpMessage mocks base method.
func (m *MockService) SendLevelUpMessage(levelUpConfig *model.GuildConfigLevelupMessage, role string, uActivity *response.HandleUserActivityResponse) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendLevelUpMessage", levelUpConfig, role, uActivity)
}

// SendLevelUpMessage indicates an expected call of SendLevelUpMessage.
func (mr *MockServiceMockRecorder) SendLevelUpMessage(levelUpConfig, role, uActivity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendLevelUpMessage", reflect.TypeOf((*MockService)(nil).SendLevelUpMessage), levelUpConfig, role, uActivity)
}

// SendMessage mocks base method.
func (m *MockService) SendMessage(channelID string, msgSend discordgo.MessageSend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", channelID, msgSend)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockServiceMockRecorder) SendMessage(channelID, msgSend interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockService)(nil).SendMessage), channelID, msgSend)
}

// SendTipActivityLogs mocks base method.
func (m *MockService) SendTipActivityLogs(channelID, userID, title, description, image string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTipActivityLogs", channelID, userID, title, description, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTipActivityLogs indicates an expected call of SendTipActivityLogs.
func (mr *MockServiceMockRecorder) SendTipActivityLogs(channelID, userID, title, description, image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTipActivityLogs", reflect.TypeOf((*MockService)(nil).SendTipActivityLogs), channelID, userID, title, description, image)
}

// SendUpdateRolesLog mocks base method.
func (m *MockService) SendUpdateRolesLog(guildID, logChannelID, userID, roleID, _type string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpdateRolesLog", guildID, logChannelID, userID, roleID, _type)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUpdateRolesLog indicates an expected call of SendUpdateRolesLog.
func (mr *MockServiceMockRecorder) SendUpdateRolesLog(guildID, logChannelID, userID, roleID, _type interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpdateRolesLog", reflect.TypeOf((*MockService)(nil).SendUpdateRolesLog), guildID, logChannelID, userID, roleID, _type)
}

// SendUpvoteMessage mocks base method.
func (m *MockService) SendUpvoteMessage(discordID, source string, isStranger bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendUpvoteMessage", discordID, source, isStranger)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendUpvoteMessage indicates an expected call of SendUpvoteMessage.
func (mr *MockServiceMockRecorder) SendUpvoteMessage(discordID, source, isStranger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendUpvoteMessage", reflect.TypeOf((*MockService)(nil).SendUpvoteMessage), discordID, source, isStranger)
}
