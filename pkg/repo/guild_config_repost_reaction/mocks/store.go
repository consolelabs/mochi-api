// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/guild_config_repost_reaction/store.go

// Package mock_guild_config_repost_reaction is a generated GoMock package.
package mock_guild_config_repost_reaction

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockStore) DeleteOne(guildID, emoji string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", guildID, emoji)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockStoreMockRecorder) DeleteOne(guildID, emoji interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockStore)(nil).DeleteOne), guildID, emoji)
}

// GetByGuildID mocks base method.
func (m *MockStore) GetByGuildID(guildID string) ([]model.GuildConfigRepostReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGuildID", guildID)
	ret0, _ := ret[0].([]model.GuildConfigRepostReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGuildID indicates an expected call of GetByGuildID.
func (mr *MockStoreMockRecorder) GetByGuildID(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGuildID", reflect.TypeOf((*MockStore)(nil).GetByGuildID), guildID)
}

// GetByReaction mocks base method.
func (m *MockStore) GetByReaction(guildID, reaction string) (model.GuildConfigRepostReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReaction", guildID, reaction)
	ret0, _ := ret[0].(model.GuildConfigRepostReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReaction indicates an expected call of GetByReaction.
func (mr *MockStoreMockRecorder) GetByReaction(guildID, reaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReaction", reflect.TypeOf((*MockStore)(nil).GetByReaction), guildID, reaction)
}

// GetByReactionStartOrStop mocks base method.
func (m *MockStore) GetByReactionStartOrStop(guildID, emoji string) (model.GuildConfigRepostReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByReactionStartOrStop", guildID, emoji)
	ret0, _ := ret[0].(model.GuildConfigRepostReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByReactionStartOrStop indicates an expected call of GetByReactionStartOrStop.
func (mr *MockStoreMockRecorder) GetByReactionStartOrStop(guildID, emoji interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByReactionStartOrStop", reflect.TypeOf((*MockStore)(nil).GetByReactionStartOrStop), guildID, emoji)
}

// GetByRepostChannelID mocks base method.
func (m *MockStore) GetByRepostChannelID(guildID, channelID string) (model.GuildConfigRepostReaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRepostChannelID", guildID, channelID)
	ret0, _ := ret[0].(model.GuildConfigRepostReaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRepostChannelID indicates an expected call of GetByRepostChannelID.
func (mr *MockStoreMockRecorder) GetByRepostChannelID(guildID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRepostChannelID", reflect.TypeOf((*MockStore)(nil).GetByRepostChannelID), guildID, channelID)
}

// UpsertOne mocks base method.
func (m *MockStore) UpsertOne(config model.GuildConfigRepostReaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOne", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOne indicates an expected call of UpsertOne.
func (mr *MockStoreMockRecorder) UpsertOne(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockStore)(nil).UpsertOne), config)
}
