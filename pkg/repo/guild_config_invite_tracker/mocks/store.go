// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/guild_config_invite_tracker/store.go

// Package mock_guildconfiginvitetracker is a generated GoMock package.
package mock_guildconfiginvitetracker

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/defipod/mochi/pkg/model"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetOne mocks base method.
func (m *MockStore) GetOne(guildID string) (*model.GuildConfigInviteTracker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", guildID)
	ret0, _ := ret[0].(*model.GuildConfigInviteTracker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockStoreMockRecorder) GetOne(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockStore)(nil).GetOne), guildID)
}

// Upsert mocks base method.
func (m *MockStore) Upsert(cmd *model.GuildConfigInviteTracker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockStoreMockRecorder) Upsert(cmd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockStore)(nil).Upsert), cmd)
}
