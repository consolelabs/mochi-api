// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/discord_user_gm_streak/store.go

// Package mock_discord_user_gm_streak is a generated GoMock package.
package mock_discord_user_gm_streak

import (
	model "github.com/defipod/mochi/pkg/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStore is a mock of Store interface
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// UpsertOne mocks base method
func (m *MockStore) UpsertOne(streak model.DiscordUserGMStreak) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOne", streak)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOne indicates an expected call of UpsertOne
func (mr *MockStoreMockRecorder) UpsertOne(streak interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockStore)(nil).UpsertOne), streak)
}

// UpsertBatch mocks base method
func (m *MockStore) UpsertBatch(streaks []model.DiscordUserGMStreak) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBatch", streaks)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertBatch indicates an expected call of UpsertBatch
func (mr *MockStoreMockRecorder) UpsertBatch(streaks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBatch", reflect.TypeOf((*MockStore)(nil).UpsertBatch), streaks)
}

// GetByDiscordIDGuildID mocks base method
func (m *MockStore) GetByDiscordIDGuildID(discordID, guildID string) (*model.DiscordUserGMStreak, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDiscordIDGuildID", discordID, guildID)
	ret0, _ := ret[0].(*model.DiscordUserGMStreak)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDiscordIDGuildID indicates an expected call of GetByDiscordIDGuildID
func (mr *MockStoreMockRecorder) GetByDiscordIDGuildID(discordID, guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDiscordIDGuildID", reflect.TypeOf((*MockStore)(nil).GetByDiscordIDGuildID), discordID, guildID)
}

// GetAll mocks base method
func (m *MockStore) GetAll() ([]model.DiscordUserGMStreak, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.DiscordUserGMStreak)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStore)(nil).GetAll))
}
