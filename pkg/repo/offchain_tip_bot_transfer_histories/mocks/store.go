// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/offchain_tip_bot_transfer_histories/store.go

// Package mock_offchain_tip_bot_transfer_histories is a generated GoMock package.
package mock_offchain_tip_bot_transfer_histories

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	response "github.com/defipod/mochi/pkg/response"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateTransferHistories mocks base method.
func (m *MockStore) CreateTransferHistories(transferHistories []model.OffchainTipBotTransferHistory) ([]model.OffchainTipBotTransferHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransferHistories", transferHistories)
	ret0, _ := ret[0].([]model.OffchainTipBotTransferHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransferHistories indicates an expected call of CreateTransferHistories.
func (mr *MockStoreMockRecorder) CreateTransferHistories(transferHistories interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransferHistories", reflect.TypeOf((*MockStore)(nil).CreateTransferHistories), transferHistories)
}

// GetByUserDiscordId mocks base method.
func (m *MockStore) GetByUserDiscordId(userDiscordId string) ([]model.OffchainTipBotTransferHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserDiscordId", userDiscordId)
	ret0, _ := ret[0].([]model.OffchainTipBotTransferHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserDiscordId indicates an expected call of GetByUserDiscordId.
func (mr *MockStoreMockRecorder) GetByUserDiscordId(userDiscordId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserDiscordId", reflect.TypeOf((*MockStore)(nil).GetByUserDiscordId), userDiscordId)
}

// GetTotalTransactionByGuild mocks base method.
func (m *MockStore) GetTotalTransactionByGuild(guildId string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransactionByGuild", guildId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTotalTransactionByGuild indicates an expected call of GetTotalTransactionByGuild.
func (mr *MockStoreMockRecorder) GetTotalTransactionByGuild(guildId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransactionByGuild", reflect.TypeOf((*MockStore)(nil).GetTotalTransactionByGuild), guildId)
}

// GetTotalTransactionByGuildAndToken mocks base method.
func (m *MockStore) GetTotalTransactionByGuildAndToken(guildId, token string) ([]model.OffchainTipBotTransferHistory, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalTransactionByGuildAndToken", guildId, token)
	ret0, _ := ret[0].([]model.OffchainTipBotTransferHistory)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTotalTransactionByGuildAndToken indicates an expected call of GetTotalTransactionByGuildAndToken.
func (mr *MockStoreMockRecorder) GetTotalTransactionByGuildAndToken(guildId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalTransactionByGuildAndToken", reflect.TypeOf((*MockStore)(nil).GetTotalTransactionByGuildAndToken), guildId, token)
}

// GetTransactionsByQuery mocks base method.
func (m *MockStore) GetTransactionsByQuery(receiverId, senderId, token string) ([]model.OffchainTipBotTransferHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByQuery", receiverId, senderId, token)
	ret0, _ := ret[0].([]model.OffchainTipBotTransferHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByQuery indicates an expected call of GetTransactionsByQuery.
func (mr *MockStoreMockRecorder) GetTransactionsByQuery(receiverId, senderId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByQuery", reflect.TypeOf((*MockStore)(nil).GetTransactionsByQuery), receiverId, senderId, token)
}

// TotalFeeFromWithdraw mocks base method.
func (m *MockStore) TotalFeeFromWithdraw() ([]response.TotalFeeWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalFeeFromWithdraw")
	ret0, _ := ret[0].([]response.TotalFeeWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalFeeFromWithdraw indicates an expected call of TotalFeeFromWithdraw.
func (mr *MockStoreMockRecorder) TotalFeeFromWithdraw() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalFeeFromWithdraw", reflect.TypeOf((*MockStore)(nil).TotalFeeFromWithdraw))
}
