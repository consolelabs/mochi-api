// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/user_watchlist_item/store.go

// Package mock_userwatchlistitem is a generated GoMock package.
package mock_userwatchlistitem

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/defipod/mochi/pkg/model"
	userwatchlistitem "github.com/defipod/mochi/pkg/repo/user_watchlist_item"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStore) Create(item *model.UserWatchlistItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), item)
}

// Delete mocks base method.
func (m *MockStore) Delete(userID, symbol string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, symbol)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(userID, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), userID, symbol)
}

// List mocks base method.
func (m *MockStore) List(q userwatchlistitem.UserWatchlistQuery) ([]model.UserWatchlistItem, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", q)
	ret0, _ := ret[0].([]model.UserWatchlistItem)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockStoreMockRecorder) List(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStore)(nil).List), q)
}
