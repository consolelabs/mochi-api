// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/invite_histories/store.go

// Package mock_invite_histories is a generated GoMock package.
package mock_invite_histories

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/defipod/mochi/pkg/model"
	response "github.com/defipod/mochi/pkg/response"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CountByInviter mocks base method.
func (m *MockStore) CountByInviter(inviterID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByInviter", inviterID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByInviter indicates an expected call of CountByInviter.
func (mr *MockStoreMockRecorder) CountByInviter(inviterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByInviter", reflect.TypeOf((*MockStore)(nil).CountByInviter), inviterID)
}

// Create mocks base method.
func (m *MockStore) Create(invite *model.InviteHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", invite)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(invite interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), invite)
}

// GetInvitesLeaderboard mocks base method.
func (m *MockStore) GetInvitesLeaderboard(guildID string) ([]response.UserInvitesAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvitesLeaderboard", guildID)
	ret0, _ := ret[0].([]response.UserInvitesAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvitesLeaderboard indicates an expected call of GetInvitesLeaderboard.
func (mr *MockStoreMockRecorder) GetInvitesLeaderboard(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvitesLeaderboard", reflect.TypeOf((*MockStore)(nil).GetInvitesLeaderboard), guildID)
}

// GetUserInvitesAggregation mocks base method.
func (m *MockStore) GetUserInvitesAggregation(guildID, inviterID string) (*response.UserInvitesAggregation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInvitesAggregation", guildID, inviterID)
	ret0, _ := ret[0].(*response.UserInvitesAggregation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInvitesAggregation indicates an expected call of GetUserInvitesAggregation.
func (mr *MockStoreMockRecorder) GetUserInvitesAggregation(guildID, inviterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInvitesAggregation", reflect.TypeOf((*MockStore)(nil).GetUserInvitesAggregation), guildID, inviterID)
}
