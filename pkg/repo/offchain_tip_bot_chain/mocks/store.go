// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/offchain_tip_bot_chain/store.go

// Package mock_offchain_tip_bot_chain is a generated GoMock package.
package mock_offchain_tip_bot_chain

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	offchain_tip_bot_chain "github.com/defipod/mochi/pkg/repo/offchain_tip_bot_chain"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockStore) GetAll(f offchain_tip_bot_chain.Filter) ([]model.OffchainTipBotChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", f)
	ret0, _ := ret[0].([]model.OffchainTipBotChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStoreMockRecorder) GetAll(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStore)(nil).GetAll), f)
}

// GetByChainID mocks base method.
func (m *MockStore) GetByChainID(chainID int) (model.OffchainTipBotChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByChainID", chainID)
	ret0, _ := ret[0].(model.OffchainTipBotChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByChainID indicates an expected call of GetByChainID.
func (mr *MockStoreMockRecorder) GetByChainID(chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByChainID", reflect.TypeOf((*MockStore)(nil).GetByChainID), chainID)
}
