// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/config_xp_level/store.go

// Package mock_config_xp_level is a generated GoMock package.
package mock_config_xp_level

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetNextLevel mocks base method.
func (m *MockStore) GetNextLevel(xp int, next bool) (*model.ConfigXpLevel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextLevel", xp, next)
	ret0, _ := ret[0].(*model.ConfigXpLevel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextLevel indicates an expected call of GetNextLevel.
func (mr *MockStoreMockRecorder) GetNextLevel(xp, next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextLevel", reflect.TypeOf((*MockStore)(nil).GetNextLevel), xp, next)
}
