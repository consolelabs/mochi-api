// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/guild_config_reaction_roles/store.go

// Package mock_guild_config_reaction_roles is a generated GoMock package.
package mock_guild_config_reaction_roles

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	model "github.com/defipod/mochi/pkg/model"
	request "github.com/defipod/mochi/pkg/request"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// ClearMessageConfig mocks base method.
func (m *MockStore) ClearMessageConfig(guildID, messageID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearMessageConfig", guildID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearMessageConfig indicates an expected call of ClearMessageConfig.
func (mr *MockStoreMockRecorder) ClearMessageConfig(guildID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearMessageConfig", reflect.TypeOf((*MockStore)(nil).ClearMessageConfig), guildID, messageID)
}

// CreateRoleConfig mocks base method.
func (m *MockStore) CreateRoleConfig(req request.RoleReactionUpdateRequest, updateJson string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoleConfig", req, updateJson)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoleConfig indicates an expected call of CreateRoleConfig.
func (mr *MockStoreMockRecorder) CreateRoleConfig(req, updateJson interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoleConfig", reflect.TypeOf((*MockStore)(nil).CreateRoleConfig), req, updateJson)
}

// GetByMessageID mocks base method.
func (m *MockStore) GetByMessageID(guildID, messageID string) (model.GuildConfigReactionRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByMessageID", guildID, messageID)
	ret0, _ := ret[0].(model.GuildConfigReactionRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByMessageID indicates an expected call of GetByMessageID.
func (mr *MockStoreMockRecorder) GetByMessageID(guildID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByMessageID", reflect.TypeOf((*MockStore)(nil).GetByMessageID), guildID, messageID)
}

// GetByRoleID mocks base method.
func (m *MockStore) GetByRoleID(guildID, roleID string) (*model.GuildConfigReactionRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRoleID", guildID, roleID)
	ret0, _ := ret[0].(*model.GuildConfigReactionRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRoleID indicates an expected call of GetByRoleID.
func (mr *MockStoreMockRecorder) GetByRoleID(guildID, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRoleID", reflect.TypeOf((*MockStore)(nil).GetByRoleID), guildID, roleID)
}

// ListAllByGuildID mocks base method.
func (m *MockStore) ListAllByGuildID(guildID string) ([]model.GuildConfigReactionRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllByGuildID", guildID)
	ret0, _ := ret[0].([]model.GuildConfigReactionRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllByGuildID indicates an expected call of ListAllByGuildID.
func (mr *MockStoreMockRecorder) ListAllByGuildID(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllByGuildID", reflect.TypeOf((*MockStore)(nil).ListAllByGuildID), guildID)
}

// UpdateRoleConfig mocks base method.
func (m *MockStore) UpdateRoleConfig(req request.RoleReactionUpdateRequest, updateJson string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoleConfig", req, updateJson)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoleConfig indicates an expected call of UpdateRoleConfig.
func (mr *MockStoreMockRecorder) UpdateRoleConfig(req, updateJson interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoleConfig", reflect.TypeOf((*MockStore)(nil).UpdateRoleConfig), req, updateJson)
}
