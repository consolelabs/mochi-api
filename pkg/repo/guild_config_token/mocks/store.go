// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/guild_config_token/store.go

// Package mock_guild_config_token is a generated GoMock package.
package mock_guild_config_token

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockStore) CreateOne(token model.GuildConfigToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOne", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockStoreMockRecorder) CreateOne(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockStore)(nil).CreateOne), token)
}

// GetAll mocks base method.
func (m *MockStore) GetAll() ([]model.GuildConfigToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.GuildConfigToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStoreMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStore)(nil).GetAll))
}

// GetByGuildID mocks base method.
func (m *MockStore) GetByGuildID(guildID string) ([]model.GuildConfigToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGuildID", guildID)
	ret0, _ := ret[0].([]model.GuildConfigToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGuildID indicates an expected call of GetByGuildID.
func (mr *MockStoreMockRecorder) GetByGuildID(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGuildID", reflect.TypeOf((*MockStore)(nil).GetByGuildID), guildID)
}

// GetByGuildIDAndTokenID mocks base method.
func (m *MockStore) GetByGuildIDAndTokenID(guildID string, tokenID int) (*model.GuildConfigToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGuildIDAndTokenID", guildID, tokenID)
	ret0, _ := ret[0].(*model.GuildConfigToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGuildIDAndTokenID indicates an expected call of GetByGuildIDAndTokenID.
func (mr *MockStoreMockRecorder) GetByGuildIDAndTokenID(guildID, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGuildIDAndTokenID", reflect.TypeOf((*MockStore)(nil).GetByGuildIDAndTokenID), guildID, tokenID)
}

// UnsetOldDefaultToken mocks base method.
func (m *MockStore) UnsetOldDefaultToken(guildID string, tokenID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnsetOldDefaultToken", guildID, tokenID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnsetOldDefaultToken indicates an expected call of UnsetOldDefaultToken.
func (mr *MockStoreMockRecorder) UnsetOldDefaultToken(guildID, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetOldDefaultToken", reflect.TypeOf((*MockStore)(nil).UnsetOldDefaultToken), guildID, tokenID)
}

// UpsertMany mocks base method.
func (m *MockStore) UpsertMany(configs []model.GuildConfigToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMany", configs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMany indicates an expected call of UpsertMany.
func (mr *MockStoreMockRecorder) UpsertMany(configs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMany", reflect.TypeOf((*MockStore)(nil).UpsertMany), configs)
}

// UpsertOne mocks base method.
func (m *MockStore) UpsertOne(configs model.GuildConfigToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOne", configs)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOne indicates an expected call of UpsertOne.
func (mr *MockStoreMockRecorder) UpsertOne(configs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockStore)(nil).UpsertOne), configs)
}
