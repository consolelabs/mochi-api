// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/guild_custom_command/store.go

// Package mock_guildcustomcommand is a generated GoMock package.
package mock_guildcustomcommand

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	guildcustomcommand "github.com/defipod/mochi/pkg/repo/guild_custom_command"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStore) Delete(command model.GuildCustomCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStoreMockRecorder) Delete(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStore)(nil).Delete), command)
}

// GetAll mocks base method.
func (m *MockStore) GetAll(q guildcustomcommand.GetAllQuery) ([]model.GuildCustomCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", q)
	ret0, _ := ret[0].([]model.GuildCustomCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStoreMockRecorder) GetAll(q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStore)(nil).GetAll), q)
}

// GetByIDAndGuildID mocks base method.
func (m *MockStore) GetByIDAndGuildID(ID, guildID string) (*model.GuildCustomCommand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDAndGuildID", ID, guildID)
	ret0, _ := ret[0].(*model.GuildCustomCommand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDAndGuildID indicates an expected call of GetByIDAndGuildID.
func (mr *MockStoreMockRecorder) GetByIDAndGuildID(ID, guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDAndGuildID", reflect.TypeOf((*MockStore)(nil).GetByIDAndGuildID), ID, guildID)
}

// Update mocks base method.
func (m *MockStore) Update(ID, guilID string, command model.GuildCustomCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ID, guilID, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStoreMockRecorder) Update(ID, guilID, command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), ID, guilID, command)
}

// UpsertOne mocks base method.
func (m *MockStore) UpsertOne(command model.GuildCustomCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertOne", command)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertOne indicates an expected call of UpsertOne.
func (mr *MockStoreMockRecorder) UpsertOne(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertOne", reflect.TypeOf((*MockStore)(nil).UpsertOne), command)
}
