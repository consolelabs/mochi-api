// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/nft_collection/store.go

// Package mock_nftcollection is a generated GoMock package.
package mock_nftcollection

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStore) Create(collection model.NFTCollection) (*model.NFTCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", collection)
	ret0, _ := ret[0].(*model.NFTCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStoreMockRecorder) Create(collection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStore)(nil).Create), collection)
}

// GetByAddress mocks base method.
func (m *MockStore) GetByAddress(address string) (*model.NFTCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAddress", address)
	ret0, _ := ret[0].(*model.NFTCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAddress indicates an expected call of GetByAddress.
func (mr *MockStoreMockRecorder) GetByAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAddress", reflect.TypeOf((*MockStore)(nil).GetByAddress), address)
}

// GetByID mocks base method.
func (m *MockStore) GetByID(id string) (*model.NFTCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*model.NFTCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStoreMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStore)(nil).GetByID), id)
}

// GetBySymbol mocks base method.
func (m *MockStore) GetBySymbol(symbol string) (*model.NFTCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySymbol", symbol)
	ret0, _ := ret[0].(*model.NFTCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySymbol indicates an expected call of GetBySymbol.
func (mr *MockStoreMockRecorder) GetBySymbol(symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySymbol", reflect.TypeOf((*MockStore)(nil).GetBySymbol), symbol)
}

// GetNewListed mocks base method.
func (m *MockStore) GetNewListed(interval, page, size int) ([]model.NewListedNFTCollection, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewListed", interval, page, size)
	ret0, _ := ret[0].([]model.NewListedNFTCollection)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNewListed indicates an expected call of GetNewListed.
func (mr *MockStoreMockRecorder) GetNewListed(interval, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewListed", reflect.TypeOf((*MockStore)(nil).GetNewListed), interval, page, size)
}

// ListAll mocks base method.
func (m *MockStore) ListAll() ([]model.NFTCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll")
	ret0, _ := ret[0].([]model.NFTCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockStoreMockRecorder) ListAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockStore)(nil).ListAll))
}

// ListAllNFTCollectionConfigs mocks base method.
func (m *MockStore) ListAllNFTCollectionConfigs() ([]model.NFTCollectionConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllNFTCollectionConfigs")
	ret0, _ := ret[0].([]model.NFTCollectionConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllNFTCollectionConfigs indicates an expected call of ListAllNFTCollectionConfigs.
func (mr *MockStoreMockRecorder) ListAllNFTCollectionConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllNFTCollectionConfigs", reflect.TypeOf((*MockStore)(nil).ListAllNFTCollectionConfigs))
}

// ListByGuildID mocks base method.
func (m *MockStore) ListByGuildID(guildID string) ([]model.NFTCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByGuildID", guildID)
	ret0, _ := ret[0].([]model.NFTCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByGuildID indicates an expected call of ListByGuildID.
func (mr *MockStoreMockRecorder) ListByGuildID(guildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByGuildID", reflect.TypeOf((*MockStore)(nil).ListByGuildID), guildID)
}
