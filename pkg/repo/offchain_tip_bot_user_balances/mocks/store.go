// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/offchain_tip_bot_user_balances/store.go

// Package mock_offchain_tip_bot_user_balances is a generated GoMock package.
package mock_offchain_tip_bot_user_balances

import (
	reflect "reflect"

	model "github.com/defipod/mochi/pkg/model"
	response "github.com/defipod/mochi/pkg/response"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetUserBalanceByTokenID mocks base method.
func (m *MockStore) GetUserBalanceByTokenID(userID string, tokenID uuid.UUID) (*model.OffchainTipBotUserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalanceByTokenID", userID, tokenID)
	ret0, _ := ret[0].(*model.OffchainTipBotUserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalanceByTokenID indicates an expected call of GetUserBalanceByTokenID.
func (mr *MockStoreMockRecorder) GetUserBalanceByTokenID(userID, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalanceByTokenID", reflect.TypeOf((*MockStore)(nil).GetUserBalanceByTokenID), userID, tokenID)
}

// GetUserBalances mocks base method.
func (m *MockStore) GetUserBalances(userID string) ([]model.OffchainTipBotUserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBalances", userID)
	ret0, _ := ret[0].([]model.OffchainTipBotUserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBalances indicates an expected call of GetUserBalances.
func (mr *MockStoreMockRecorder) GetUserBalances(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBalances", reflect.TypeOf((*MockStore)(nil).GetUserBalances), userID)
}

// SumAmountByTokenId mocks base method.
func (m *MockStore) SumAmountByTokenId() ([]response.TotalOffchainBalancesInDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumAmountByTokenId")
	ret0, _ := ret[0].([]response.TotalOffchainBalancesInDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumAmountByTokenId indicates an expected call of SumAmountByTokenId.
func (mr *MockStoreMockRecorder) SumAmountByTokenId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumAmountByTokenId", reflect.TypeOf((*MockStore)(nil).SumAmountByTokenId))
}

// UpsertBatch mocks base method.
func (m *MockStore) UpsertBatch(list []model.OffchainTipBotUserBalance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertBatch", list)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertBatch indicates an expected call of UpsertBatch.
func (mr *MockStoreMockRecorder) UpsertBatch(list interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertBatch", reflect.TypeOf((*MockStore)(nil).UpsertBatch), list)
}
